{"ast":null,"code":"import { defineComponent, useAttrs, useSlots, inject, toRef, ref, computed, nextTick, watch, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, Fragment, renderList, toDisplayString, createCommentVNode, createVNode, withDirectives, withCtx, vShow, withKeys, createBlock, createTextVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton } from '../../../button/index.mjs';\nimport '../../../../directives/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { ElInput } from '../../../input/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport '../../../../utils/index.mjs';\nimport '../../../../constants/index.mjs';\nimport { DArrowLeft, ArrowLeft, ArrowRight, DArrowRight } from '@element-plus/icons-vue';\nimport '../../../tooltip/index.mjs';\nimport { panelDatePickProps } from '../props/panel-date-pick.mjs';\nimport DateTable from './basic-date-table.mjs';\nimport MonthTable from './basic-month-table.mjs';\nimport YearTable from './basic-year-table.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from '../../../tooltip/src/constants.mjs';\nimport { isArray, isFunction } from '@vue/shared';\nimport { extractTimeFormat, extractDateFormat } from '../../../time-picker/src/utils.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nimport TimePickPanel from '../../../time-picker/src/time-picker-com/panel-time-pick.mjs';\nimport ClickOutside from '../../../../directives/click-outside/index.mjs';\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"aria-label\"];\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"aria-label\"];\nconst _hoisted_5 = [\"aria-label\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"panel-date-pick\",\n  props: panelDatePickProps,\n  emits: [\"pick\", \"set-picker-option\", \"panel-change\"],\n  setup(__props, {\n    emit: contextEmit\n  }) {\n    const props = __props;\n    const timeWithinRange = (_, __, ___) => true;\n    const ppNs = useNamespace(\"picker-panel\");\n    const dpNs = useNamespace(\"date-picker\");\n    const attrs = useAttrs();\n    const slots = useSlots();\n    const {\n      t,\n      lang\n    } = useLocale();\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const popper = inject(TOOLTIP_INJECTION_KEY);\n    const {\n      shortcuts,\n      disabledDate,\n      cellClassName,\n      defaultTime\n    } = pickerBase.props;\n    const defaultValue = toRef(pickerBase.props, \"defaultValue\");\n    const currentViewRef = ref();\n    const innerDate = ref(dayjs().locale(lang.value));\n    const isChangeToNow = ref(false);\n    let isShortcut = false;\n    const defaultTimeD = computed(() => {\n      return dayjs(defaultTime).locale(lang.value);\n    });\n    const month = computed(() => {\n      return innerDate.value.month();\n    });\n    const year = computed(() => {\n      return innerDate.value.year();\n    });\n    const selectableRange = ref([]);\n    const userInputDate = ref(null);\n    const userInputTime = ref(null);\n    const checkDateWithinRange = date => {\n      return selectableRange.value.length > 0 ? timeWithinRange(date, selectableRange.value, props.format || \"HH:mm:ss\") : true;\n    };\n    const formatEmit = emitDayjs => {\n      if (defaultTime && !visibleTime.value && !isChangeToNow.value && !isShortcut) {\n        return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());\n      }\n      if (showTime.value) return emitDayjs.millisecond(0);\n      return emitDayjs.startOf(\"day\");\n    };\n    const emit = (value, ...args) => {\n      if (!value) {\n        contextEmit(\"pick\", value, ...args);\n      } else if (isArray(value)) {\n        const dates = value.map(formatEmit);\n        contextEmit(\"pick\", dates, ...args);\n      } else {\n        contextEmit(\"pick\", formatEmit(value), ...args);\n      }\n      userInputDate.value = null;\n      userInputTime.value = null;\n      isChangeToNow.value = false;\n      isShortcut = false;\n    };\n    const handleDatePick = async (value, keepOpen) => {\n      if (selectionMode.value === \"date\") {\n        value = value;\n        let newDate = props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;\n        if (!checkDateWithinRange(newDate)) {\n          newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());\n        }\n        innerDate.value = newDate;\n        emit(newDate, showTime.value || keepOpen);\n        if (props.type === \"datetime\") {\n          await nextTick();\n          handleFocusPicker();\n        }\n      } else if (selectionMode.value === \"week\") {\n        emit(value.date);\n      } else if (selectionMode.value === \"dates\") {\n        emit(value, true);\n      }\n    };\n    const moveByMonth = forward => {\n      const action = forward ? \"add\" : \"subtract\";\n      innerDate.value = innerDate.value[action](1, \"month\");\n      handlePanelChange(\"month\");\n    };\n    const moveByYear = forward => {\n      const currentDate = innerDate.value;\n      const action = forward ? \"add\" : \"subtract\";\n      innerDate.value = currentView.value === \"year\" ? currentDate[action](10, \"year\") : currentDate[action](1, \"year\");\n      handlePanelChange(\"year\");\n    };\n    const currentView = ref(\"date\");\n    const yearLabel = computed(() => {\n      const yearTranslation = t(\"el.datepicker.year\");\n      if (currentView.value === \"year\") {\n        const startYear = Math.floor(year.value / 10) * 10;\n        if (yearTranslation) {\n          return `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;\n        }\n        return `${startYear} - ${startYear + 9}`;\n      }\n      return `${year.value} ${yearTranslation}`;\n    });\n    const handleShortcutClick = shortcut => {\n      const shortcutValue = isFunction(shortcut.value) ? shortcut.value() : shortcut.value;\n      if (shortcutValue) {\n        isShortcut = true;\n        emit(dayjs(shortcutValue).locale(lang.value));\n        return;\n      }\n      if (shortcut.onClick) {\n        shortcut.onClick({\n          attrs,\n          slots,\n          emit: contextEmit\n        });\n      }\n    };\n    const selectionMode = computed(() => {\n      const {\n        type\n      } = props;\n      if ([\"week\", \"month\", \"year\", \"years\", \"dates\"].includes(type)) return type;\n      return \"date\";\n    });\n    const keyboardMode = computed(() => {\n      return selectionMode.value === \"date\" ? currentView.value : selectionMode.value;\n    });\n    const hasShortcuts = computed(() => !!shortcuts.length);\n    const handleMonthPick = async month2 => {\n      innerDate.value = innerDate.value.startOf(\"month\").month(month2);\n      if (selectionMode.value === \"month\") {\n        emit(innerDate.value, false);\n      } else {\n        currentView.value = \"date\";\n        if ([\"month\", \"year\", \"date\", \"week\"].includes(selectionMode.value)) {\n          emit(innerDate.value, true);\n          await nextTick();\n          handleFocusPicker();\n        }\n      }\n      handlePanelChange(\"month\");\n    };\n    const handleYearPick = async (year2, keepOpen) => {\n      if (selectionMode.value === \"year\") {\n        innerDate.value = innerDate.value.startOf(\"year\").year(year2);\n        emit(innerDate.value, false);\n      } else if (selectionMode.value === \"years\") {\n        emit(year2, keepOpen != null ? keepOpen : true);\n      } else {\n        innerDate.value = innerDate.value.year(year2);\n        currentView.value = \"month\";\n        if ([\"month\", \"year\", \"date\", \"week\"].includes(selectionMode.value)) {\n          emit(innerDate.value, true);\n          await nextTick();\n          handleFocusPicker();\n        }\n      }\n      handlePanelChange(\"year\");\n    };\n    const showPicker = async view => {\n      currentView.value = view;\n      await nextTick();\n      handleFocusPicker();\n    };\n    const showTime = computed(() => props.type === \"datetime\" || props.type === \"datetimerange\");\n    const footerVisible = computed(() => {\n      const showDateFooter = showTime.value || selectionMode.value === \"dates\";\n      const showYearFooter = selectionMode.value === \"years\";\n      const isDateView = currentView.value === \"date\";\n      const isYearView = currentView.value === \"year\";\n      return showDateFooter && isDateView || showYearFooter && isYearView;\n    });\n    const disabledConfirm = computed(() => {\n      if (!disabledDate) return false;\n      if (!props.parsedValue) return true;\n      if (isArray(props.parsedValue)) {\n        return disabledDate(props.parsedValue[0].toDate());\n      }\n      return disabledDate(props.parsedValue.toDate());\n    });\n    const onConfirm = () => {\n      if (selectionMode.value === \"dates\" || selectionMode.value === \"years\") {\n        emit(props.parsedValue);\n      } else {\n        let result = props.parsedValue;\n        if (!result) {\n          const defaultTimeD2 = dayjs(defaultTime).locale(lang.value);\n          const defaultValueD = getDefaultValue();\n          result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());\n        }\n        innerDate.value = result;\n        emit(result);\n      }\n    };\n    const disabledNow = computed(() => {\n      if (!disabledDate) return false;\n      return disabledDate(dayjs().locale(lang.value).toDate());\n    });\n    const changeToNow = () => {\n      const now = dayjs().locale(lang.value);\n      const nowDate = now.toDate();\n      isChangeToNow.value = true;\n      if ((!disabledDate || !disabledDate(nowDate)) && checkDateWithinRange(nowDate)) {\n        innerDate.value = dayjs().locale(lang.value);\n        emit(innerDate.value);\n      }\n    };\n    const timeFormat = computed(() => {\n      return props.timeFormat || extractTimeFormat(props.format);\n    });\n    const dateFormat = computed(() => {\n      return props.dateFormat || extractDateFormat(props.format);\n    });\n    const visibleTime = computed(() => {\n      if (userInputTime.value) return userInputTime.value;\n      if (!props.parsedValue && !defaultValue.value) return;\n      return (props.parsedValue || innerDate.value).format(timeFormat.value);\n    });\n    const visibleDate = computed(() => {\n      if (userInputDate.value) return userInputDate.value;\n      if (!props.parsedValue && !defaultValue.value) return;\n      return (props.parsedValue || innerDate.value).format(dateFormat.value);\n    });\n    const timePickerVisible = ref(false);\n    const onTimePickerInputFocus = () => {\n      timePickerVisible.value = true;\n    };\n    const handleTimePickClose = () => {\n      timePickerVisible.value = false;\n    };\n    const getUnits = date => {\n      return {\n        hour: date.hour(),\n        minute: date.minute(),\n        second: date.second(),\n        year: date.year(),\n        month: date.month(),\n        date: date.date()\n      };\n    };\n    const handleTimePick = (value, visible, first) => {\n      const {\n        hour,\n        minute,\n        second\n      } = getUnits(value);\n      const newDate = props.parsedValue ? props.parsedValue.hour(hour).minute(minute).second(second) : value;\n      innerDate.value = newDate;\n      emit(innerDate.value, true);\n      if (!first) {\n        timePickerVisible.value = visible;\n      }\n    };\n    const handleVisibleTimeChange = value => {\n      const newDate = dayjs(value, timeFormat.value).locale(lang.value);\n      if (newDate.isValid() && checkDateWithinRange(newDate)) {\n        const {\n          year: year2,\n          month: month2,\n          date\n        } = getUnits(innerDate.value);\n        innerDate.value = newDate.year(year2).month(month2).date(date);\n        userInputTime.value = null;\n        timePickerVisible.value = false;\n        emit(innerDate.value, true);\n      }\n    };\n    const handleVisibleDateChange = value => {\n      const newDate = dayjs(value, dateFormat.value).locale(lang.value);\n      if (newDate.isValid()) {\n        if (disabledDate && disabledDate(newDate.toDate())) {\n          return;\n        }\n        const {\n          hour,\n          minute,\n          second\n        } = getUnits(innerDate.value);\n        innerDate.value = newDate.hour(hour).minute(minute).second(second);\n        userInputDate.value = null;\n        emit(innerDate.value, true);\n      }\n    };\n    const isValidValue = date => {\n      return dayjs.isDayjs(date) && date.isValid() && (disabledDate ? !disabledDate(date.toDate()) : true);\n    };\n    const formatToString = value => {\n      return isArray(value) ? value.map(_ => _.format(props.format)) : value.format(props.format);\n    };\n    const parseUserInput = value => {\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const getDefaultValue = () => {\n      const parseDate = dayjs(defaultValue.value).locale(lang.value);\n      if (!defaultValue.value) {\n        const defaultTimeDValue = defaultTimeD.value;\n        return dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);\n      }\n      return parseDate;\n    };\n    const handleFocusPicker = async () => {\n      var _a;\n      if ([\"week\", \"month\", \"year\", \"date\"].includes(selectionMode.value)) {\n        (_a = currentViewRef.value) == null ? void 0 : _a.focus();\n        if (selectionMode.value === \"week\") {\n          handleKeyControl(EVENT_CODE.down);\n        }\n      }\n    };\n    const handleKeydownTable = event => {\n      const {\n        code\n      } = event;\n      const validCode = [EVENT_CODE.up, EVENT_CODE.down, EVENT_CODE.left, EVENT_CODE.right, EVENT_CODE.home, EVENT_CODE.end, EVENT_CODE.pageUp, EVENT_CODE.pageDown];\n      if (validCode.includes(code)) {\n        handleKeyControl(code);\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      if ([EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.numpadEnter].includes(code) && userInputDate.value === null && userInputTime.value === null) {\n        event.preventDefault();\n        emit(innerDate.value, false);\n      }\n    };\n    const handleKeyControl = code => {\n      var _a;\n      const {\n        up,\n        down,\n        left,\n        right,\n        home,\n        end,\n        pageUp,\n        pageDown\n      } = EVENT_CODE;\n      const mapping = {\n        year: {\n          [up]: -4,\n          [down]: 4,\n          [left]: -1,\n          [right]: 1,\n          offset: (date, step) => date.setFullYear(date.getFullYear() + step)\n        },\n        month: {\n          [up]: -4,\n          [down]: 4,\n          [left]: -1,\n          [right]: 1,\n          offset: (date, step) => date.setMonth(date.getMonth() + step)\n        },\n        week: {\n          [up]: -1,\n          [down]: 1,\n          [left]: -1,\n          [right]: 1,\n          offset: (date, step) => date.setDate(date.getDate() + step * 7)\n        },\n        date: {\n          [up]: -7,\n          [down]: 7,\n          [left]: -1,\n          [right]: 1,\n          [home]: date => -date.getDay(),\n          [end]: date => -date.getDay() + 6,\n          [pageUp]: date => -new Date(date.getFullYear(), date.getMonth(), 0).getDate(),\n          [pageDown]: date => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate(),\n          offset: (date, step) => date.setDate(date.getDate() + step)\n        }\n      };\n      const newDate = innerDate.value.toDate();\n      while (Math.abs(innerDate.value.diff(newDate, \"year\", true)) < 1) {\n        const map = mapping[keyboardMode.value];\n        if (!map) return;\n        map.offset(newDate, isFunction(map[code]) ? map[code](newDate) : (_a = map[code]) != null ? _a : 0);\n        if (disabledDate && disabledDate(newDate)) {\n          break;\n        }\n        const result = dayjs(newDate).locale(lang.value);\n        innerDate.value = result;\n        contextEmit(\"pick\", result, true);\n        break;\n      }\n    };\n    const handlePanelChange = mode => {\n      contextEmit(\"panel-change\", innerDate.value.toDate(), mode, currentView.value);\n    };\n    watch(() => selectionMode.value, val => {\n      if ([\"month\", \"year\"].includes(val)) {\n        currentView.value = val;\n        return;\n      } else if (val === \"years\") {\n        currentView.value = \"year\";\n        return;\n      }\n      currentView.value = \"date\";\n    }, {\n      immediate: true\n    });\n    watch(() => currentView.value, () => {\n      popper == null ? void 0 : popper.updatePopper();\n    });\n    watch(() => defaultValue.value, val => {\n      if (val) {\n        innerDate.value = getDefaultValue();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.parsedValue, val => {\n      if (val) {\n        if (selectionMode.value === \"dates\" || selectionMode.value === \"years\") return;\n        if (Array.isArray(val)) return;\n        innerDate.value = val;\n      } else {\n        innerDate.value = getDefaultValue();\n      }\n    }, {\n      immediate: true\n    });\n    contextEmit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    contextEmit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    contextEmit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    contextEmit(\"set-picker-option\", [\"handleFocusPicker\", handleFocusPicker]);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ppNs).b(), unref(dpNs).b(), {\n          \"has-sidebar\": _ctx.$slots.sidebar || unref(hasShortcuts),\n          \"has-time\": unref(showTime)\n        }])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"body-wrapper\"))\n      }, [renderSlot(_ctx.$slots, \"sidebar\", {\n        class: normalizeClass(unref(ppNs).e(\"sidebar\"))\n      }), unref(hasShortcuts) ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ppNs).e(\"sidebar\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {\n        return openBlock(), createElementBlock(\"button\", {\n          key,\n          type: \"button\",\n          class: normalizeClass(unref(ppNs).e(\"shortcut\")),\n          onClick: $event => handleShortcutClick(shortcut)\n        }, toDisplayString(shortcut.text), 11, _hoisted_1);\n      }), 128))], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"body\"))\n      }, [unref(showTime) ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(dpNs).e(\"time-header\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(dpNs).e(\"editor-wrap\"))\n      }, [createVNode(unref(ElInput), {\n        placeholder: unref(t)(\"el.datepicker.selectDate\"),\n        \"model-value\": unref(visibleDate),\n        size: \"small\",\n        \"validate-event\": false,\n        onInput: _cache[0] || (_cache[0] = val => userInputDate.value = val),\n        onChange: handleVisibleDateChange\n      }, null, 8, [\"placeholder\", \"model-value\"])], 2), withDirectives((openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass(unref(dpNs).e(\"editor-wrap\"))\n      }, [createVNode(unref(ElInput), {\n        placeholder: unref(t)(\"el.datepicker.selectTime\"),\n        \"model-value\": unref(visibleTime),\n        size: \"small\",\n        \"validate-event\": false,\n        onFocus: onTimePickerInputFocus,\n        onInput: _cache[1] || (_cache[1] = val => userInputTime.value = val),\n        onChange: handleVisibleTimeChange\n      }, null, 8, [\"placeholder\", \"model-value\"]), createVNode(unref(TimePickPanel), {\n        visible: timePickerVisible.value,\n        format: unref(timeFormat),\n        \"parsed-value\": innerDate.value,\n        onPick: handleTimePick\n      }, null, 8, [\"visible\", \"format\", \"parsed-value\"])], 2)), [[unref(ClickOutside), handleTimePickClose]])], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n        class: normalizeClass([unref(dpNs).e(\"header\"), (currentView.value === \"year\" || currentView.value === \"month\") && unref(dpNs).e(\"header--bordered\")])\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(dpNs).e(\"prev-btn\"))\n      }, [createElementVNode(\"button\", {\n        type: \"button\",\n        \"aria-label\": unref(t)(`el.datepicker.prevYear`),\n        class: normalizeClass([\"d-arrow-left\", unref(ppNs).e(\"icon-btn\")]),\n        onClick: _cache[2] || (_cache[2] = $event => moveByYear(false))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowLeft))]),\n        _: 1\n      })], 10, _hoisted_2), withDirectives(createElementVNode(\"button\", {\n        type: \"button\",\n        \"aria-label\": unref(t)(`el.datepicker.prevMonth`),\n        class: normalizeClass([unref(ppNs).e(\"icon-btn\"), \"arrow-left\"]),\n        onClick: _cache[3] || (_cache[3] = $event => moveByMonth(false))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(ArrowLeft))]),\n        _: 1\n      })], 10, _hoisted_3), [[vShow, currentView.value === \"date\"]])], 2), createElementVNode(\"span\", {\n        role: \"button\",\n        class: normalizeClass(unref(dpNs).e(\"header-label\")),\n        \"aria-live\": \"polite\",\n        tabindex: \"0\",\n        onKeydown: _cache[4] || (_cache[4] = withKeys($event => showPicker(\"year\"), [\"enter\"])),\n        onClick: _cache[5] || (_cache[5] = $event => showPicker(\"year\"))\n      }, toDisplayString(unref(yearLabel)), 35), withDirectives(createElementVNode(\"span\", {\n        role: \"button\",\n        \"aria-live\": \"polite\",\n        tabindex: \"0\",\n        class: normalizeClass([unref(dpNs).e(\"header-label\"), {\n          active: currentView.value === \"month\"\n        }]),\n        onKeydown: _cache[6] || (_cache[6] = withKeys($event => showPicker(\"month\"), [\"enter\"])),\n        onClick: _cache[7] || (_cache[7] = $event => showPicker(\"month\"))\n      }, toDisplayString(unref(t)(`el.datepicker.month${unref(month) + 1}`)), 35), [[vShow, currentView.value === \"date\"]]), createElementVNode(\"span\", {\n        class: normalizeClass(unref(dpNs).e(\"next-btn\"))\n      }, [withDirectives(createElementVNode(\"button\", {\n        type: \"button\",\n        \"aria-label\": unref(t)(`el.datepicker.nextMonth`),\n        class: normalizeClass([unref(ppNs).e(\"icon-btn\"), \"arrow-right\"]),\n        onClick: _cache[8] || (_cache[8] = $event => moveByMonth(true))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(ArrowRight))]),\n        _: 1\n      })], 10, _hoisted_4), [[vShow, currentView.value === \"date\"]]), createElementVNode(\"button\", {\n        type: \"button\",\n        \"aria-label\": unref(t)(`el.datepicker.nextYear`),\n        class: normalizeClass([unref(ppNs).e(\"icon-btn\"), \"d-arrow-right\"]),\n        onClick: _cache[9] || (_cache[9] = $event => moveByYear(true))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowRight))]),\n        _: 1\n      })], 10, _hoisted_5)], 2)], 2), [[vShow, currentView.value !== \"time\"]]), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"content\")),\n        onKeydown: handleKeydownTable\n      }, [currentView.value === \"date\" ? (openBlock(), createBlock(DateTable, {\n        key: 0,\n        ref_key: \"currentViewRef\",\n        ref: currentViewRef,\n        \"selection-mode\": unref(selectionMode),\n        date: innerDate.value,\n        \"parsed-value\": _ctx.parsedValue,\n        \"disabled-date\": unref(disabledDate),\n        \"cell-class-name\": unref(cellClassName),\n        onPick: handleDatePick\n      }, null, 8, [\"selection-mode\", \"date\", \"parsed-value\", \"disabled-date\", \"cell-class-name\"])) : createCommentVNode(\"v-if\", true), currentView.value === \"year\" ? (openBlock(), createBlock(YearTable, {\n        key: 1,\n        ref_key: \"currentViewRef\",\n        ref: currentViewRef,\n        \"selection-mode\": unref(selectionMode),\n        date: innerDate.value,\n        \"disabled-date\": unref(disabledDate),\n        \"parsed-value\": _ctx.parsedValue,\n        onPick: handleYearPick\n      }, null, 8, [\"selection-mode\", \"date\", \"disabled-date\", \"parsed-value\"])) : createCommentVNode(\"v-if\", true), currentView.value === \"month\" ? (openBlock(), createBlock(MonthTable, {\n        key: 2,\n        ref_key: \"currentViewRef\",\n        ref: currentViewRef,\n        date: innerDate.value,\n        \"parsed-value\": _ctx.parsedValue,\n        \"disabled-date\": unref(disabledDate),\n        onPick: handleMonthPick\n      }, null, 8, [\"date\", \"parsed-value\", \"disabled-date\"])) : createCommentVNode(\"v-if\", true)], 34)], 2)], 2), withDirectives(createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"footer\"))\n      }, [withDirectives(createVNode(unref(ElButton), {\n        text: \"\",\n        size: \"small\",\n        class: normalizeClass(unref(ppNs).e(\"link-btn\")),\n        disabled: unref(disabledNow),\n        onClick: changeToNow\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.now\")), 1)]),\n        _: 1\n      }, 8, [\"class\", \"disabled\"]), [[vShow, unref(selectionMode) !== \"dates\" && unref(selectionMode) !== \"years\"]]), createVNode(unref(ElButton), {\n        plain: \"\",\n        size: \"small\",\n        class: normalizeClass(unref(ppNs).e(\"link-btn\")),\n        disabled: unref(disabledConfirm),\n        onClick: onConfirm\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"class\", \"disabled\"])], 2), [[vShow, unref(footerVisible)]])], 2);\n    };\n  }\n});\nvar DatePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"panel-date-pick.vue\"]]);\nexport { DatePickPanel as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0OA,MAAMA,eAAkB,IAACC,CAAe,MAASC,GAAgB;IAG3D,aAAOC,aAAa,cAAc;IAClC,aAAOA,aAAa,aAAa;IACvC,MAAMC,QAAQC,QAAS;IACvB,MAAMC,QAAQC,QAAS;IAEjB;MAAEC,CAAG;MAAAC;IAAA,IAASC,SAAU;IACxB,mBAAaC,OAAO,gBAAgB;IACpC,eAASA,OAAOC,qBAAqB;IAC3C,MAAM;MAAEC;MAAWC,YAAc;MAAAC;MAAeC;IAAA,IAAgBC,UAAW;IAC3E,MAAMC,YAAe,SAAMD,UAAW,QAAO,cAAc;IAE3D,MAAME,iBAAiBC,GAA2B;IAElD,MAAMC,YAAYD,GAAI,SAAQE,MAAO,MAAKC,KAAK,CAAC;IAE1C,sBAAgBH,IAAI,KAAK;IAE/B,IAAII,UAAa;IAEX,qBAAeC,SAAS,MAAM;MAClC,OAAOC,KAAM,YAAW,CAAE,QAAOjB,KAAKc,KAAK;IAAA,CAC5C;IAEK,cAAQE,SAAS,MAAM;MACpB,iBAAUF,MAAMI,KAAM;IAAA,CAC9B;IAEK,aAAOF,SAAS,MAAM;MACnB,iBAAUF,MAAMK,IAAK;IAAA,CAC7B;IAEK,wBAAkBR,GAAI,GAAE;IACxB,sBAAgBA,IAAmB,IAAI;IACvC,sBAAgBA,IAAmB,IAAI;IAEvC,6BAAwBS,IAAqB;MAC1C,uBAAgBN,KAAM,UAAS,CAClC,mBAAgBM,IAAM,kBAAgBN,KAAO,QAAMO,MAAU,cAAU,CACvE;IAAA,CACN;IACM,mBAAcC,SAAqB;MAErC,mBACA,CAACC,WAAY,UACb,CAACC,aAAc,UACf,CAACT,UACD;QACA,OAAOU,YAAa,OACjBN,IAAK,WAAUA,MAAM,EACrBD,KAAM,WAAUA,OAAO,EACvBE,IAAK,WAAUA,MAAM;MAAA;MAE1B,IAAIM,QAAS,QAAc,iBAAUC,YAAY,CAAC;MAC3C,iBAAUC,QAAQ,KAAK;IAAA,CAChC;IACM,aAAOC,CAACf,UAA2BgB,IAAgB;MACvD,IAAI,CAAChB,KAAO;QACEiB,oBAAQjB,KAAO,KAAGgB,IAAI;MAAA,CACpC,UAAWE,OAAQ,MAAK,CAAG;QACnB,cAAQlB,KAAM,KAAImB,UAAU;QACtBF,oBAAQG,KAAO,KAAGJ,IAAI;MAAA,CAC7B;QACLC,YAAY,MAAQ,aAAWjB,KAAK,GAAG,GAAGgB,IAAI;MAAA;MAEhDK,cAAcrB,KAAQ;MACtBsB,cAActB,KAAQ;MACtBU,cAAcV,KAAQ;MACTC;IAAA,CACf;IACM,uBAAiB,OAAOD,OAAuBuB,QAAuB;MACtE,kBAAcvB,UAAU,MAAQ;QAC1BA;QACR,IAAIwB,UAAUC,KAAM,eACfA,MAAMC,WACJ,MAAK1B,MAAMK,IAAK,EAAC,EACjBD,KAAM,OAAMA,OAAO,EACnBE,KAAKN,KAAM,OAAM,CACpB;QAEA,KAAC2B,oBAAqB,QAAO,CAAG;UAClCH,UAAWI,gBAAgB5B,KAAM,IAAG,CACjC,OAAKA,MAAMK,IAAK,EAAC,CACjB,OAAML,MAAMI,KAAM,EAAC,EACnBE,IAAK,OAAMA,MAAM;QAAA;QAEtBR,UAAUE,KAAQ;QACbe,cAASH,QAAS,UAASW,QAAQ;QAEpC,UAAMM,SAAS,UAAY;UAC7B,MAAMC,QAAS;UACGC;QAAA;MACpB,CACF,UAAWC,aAAc,WAAU,MAAQ;QACzCjB,KAAMf,MAA0BM,IAAI;MAAA,CACtC,UAAW0B,aAAc,WAAU,OAAS;QAC1CjB,KAAKf,OAA2B,IAAI;MAAA;IACtC,CACF;IAEM,oBAAeiC,OAAqB;MAClC,eAASA,UAAU,KAAQ;MACjCnC,UAAUE,KAAQ,aAAUA,KAAM,SAAQ,GAAG,OAAO;MACpDkC,kBAAkB,OAAO;IAAA,CAC3B;IAEM,mBAAcD,OAAqB;MACvC,MAAME,cAAcrC,SAAU;MACxB,eAASmC,UAAU,KAAQ;MAEjCnC,UAAUE,KACR,eAAYA,KAAU,cAClBmC,WAAY,SAAQ,EAAI,QAAM,CAC9B,eAAYC,MAAQ,KAAG,MAAM;MAEnCF,kBAAkB,MAAM;IAAA,CAC1B;IAEM,oBAAcrC,IAAI,MAAM;IAExB,kBAAYK,SAAS,MAAM;MACzB,wBAAkBjB,EAAE,oBAAoB;MAC1C,gBAAYe,UAAU,MAAQ;QAChC,MAAMqC,YAAYC,IAAK,OAAMjC,IAAK,SAAQ,EAAE,CAAI;QAChD,IAAIkC,eAAiB;UACnB,OAAU,gBAAaA,eACrB,kBAAY,CACV;QAAA;QAEC,UAAGF,eAAeA,SAAY;MAAA;MAEhC,UAAGhC,KAAKL,KAAS;IAAA,CACzB;IAOK,4BAAuBwC,QAAuB;MAC5C,sBAAgBC,WAAWD,QAAS,MAAK,IAC3CA,QAAS,WACTA,QAAS;MACb,IAAIE,aAAe;QACJzC;QACbc,KAAKZ,MAAMuC,aAAa,EAAE3C,MAAO,MAAKC,KAAK,CAAC;QAC5C;MAAA;MAEF,IAAIwC,SAASG,OAAS;QACpBH,SAASG,OAAQ;UACf9D;UACAE;UACAgC,IAAM;QAAA,CACP;MAAA;IACH,CACF;IAEM,sBAAgBb,SAAuB,MAAM;MACjD,MAAM;QAAE2B;MAAS;MACb,KAAC,QAAQ,OAAS,UAAQ,SAAS,OAAO,EAAEe,SAASf,IAAI,GAAU;MAChE;IAAA,CACR;IAEK,qBAAe3B,SAAiB,MAAM;MAC1C,OAAO8B,aAAc,WAAU,MAC3B,eAAYhC,QACZgC,aAAc;IAAA,CACnB;IAED,MAAMa,eAAe3C,QAAS,OAAM,CAAC,CAACZ,UAAUwD,MAAM;IAEhD,wBAAkB,MAAOC,MAAkB;MAC/CjD,UAAUE,QAAQF,SAAU,OAAMgB,QAAQ,OAAO,EAAEV,MAAM2C,MAAK;MAC1D,kBAAc/C,UAAU,OAAS;QAC9Be,eAAUf,OAAO,KAAK;MAAA,CACtB;QACLgD,YAAYhD,KAAQ;QAChB,KAAC,SAAS,MAAQ,UAAQ,MAAM,CAAE,UAASgC,aAAc,MAAK,CAAG;UAC9DjB,eAAUf,OAAO,IAAI;UAC1B,MAAM8B,QAAS;UACGC;QAAA;MACpB;MAEFG,kBAAkB,OAAO;IAAA,CAC3B;IAEM,uBAAiB,OACrBe,OACA1B,QACG;MACC,kBAAcvB,UAAU,MAAQ;QAClCF,UAAUE,QAAQF,SAAU,OAAMgB,QAAQ,MAAM,EAAET,KAAK4C,KAAc;QAChElC,eAAUf,OAAO,KAAK;MAAA,CAC7B,UAAWgC,aAAc,WAAU,OAAS;QACrCjB,YAA0BQ,YAAY,IAAI;MAAA,CAC1C;QACLzB,UAAUE,KAAQ,aAAUA,KAAM,MAAKiD,KAAc;QACrDD,YAAYhD,KAAQ;QAChB,KAAC,SAAS,MAAQ,UAAQ,MAAM,CAAE,UAASgC,aAAc,MAAK,CAAG;UAC9DjB,eAAUf,OAAO,IAAI;UAC1B,MAAM8B,QAAS;UACGC;QAAA;MACpB;MAEFG,kBAAkB,MAAM;IAAA,CAC1B;IAEM,mBAAa,MAAOgB,IAA2B;MACnDF,YAAYhD,KAAQ;MACpB,MAAM8B,QAAS;MACGC;IAAA,CACpB;IAEM,iBAAW7B,SACf,MAAMuB,MAAMI,SAAS,UAAc,UAAMA,SAAS,eACpD;IAEM,sBAAgB3B,SAAS,MAAM;MACnC,MAAMiD,cAAiB,YAASnD,KAAS,kBAAcA,KAAU;MAC3D,uBAAiBgC,cAAchC,KAAU;MACzC,mBAAagD,YAAYhD,KAAU;MACnC,mBAAagD,YAAYhD,KAAU;MACjC,yBAAkBoD,cAAgBC,cAAkB;IAAA,CAC7D;IAEK,wBAAkBnD,SAAS,MAAM;MACrC,IAAI,CAACX,cAAqB;MAC1B,IAAI,CAACkC,KAAM,cAAoB;MAC3B,YAAQA,KAAM,YAAW,CAAG;QAC9B,OAAOlC,YAAa,OAAMmC,WAAY,IAAG4B,QAAQ;MAAA;MAEnD,OAAO/D,YAAa,OAAMmC,WAAY,SAAQ;IAAA,CAC/C;IACD,MAAM6B,YAAYA,MAAM;MACtB,IAAIvB,aAAc,WAAU,OAAW,kBAAchC,UAAU,OAAS;QACtEe,KAAKU,MAAMC,WAAsB;MAAA,CAC5B;QAEL,IAAI8B,SAAS/B,KAAM;QACnB,IAAI,CAAC+B,MAAQ;UACX,MAAMC,gBAAetD,KAAM,YAAW,CAAE,QAAOjB,KAAKc,KAAK;UACzD,MAAM0D,gBAAgBC,eAAgB;UACtCH,SAASC,aACN,MAAKC,aAAc,OAAM,CACzB,OAAMA,aAAc,QAAO,EAC3BpD,IAAK,eAAcA,MAAM;QAAA;QAE9BR,UAAUE,KAAQ;QAClBe,KAAKyC,MAAM;MAAA;IACb,CACF;IAEM,oBAActD,SAAS,MAAM;MACjC,IAAI,CAACX,cAAqB;MACnB,oBAAaY,OAAQ,QAAOjB,KAAKc,KAAK,EAAEsD,QAAQ;IAAA,CACxD;IACD,MAAMM,cAAcA,MAAM;MAGxB,MAAMC,GAAM,UAAQ,QAAO3E,KAAKc,KAAK;MAC/B,gBAAU6D,IAAIP,MAAO;MAC3B5C,cAAcV,KAAQ;MAEnB,MAACT,gBAAgB,CAACA,aAAauE,OAAO,CACvC,0BAAqBA,OAAO,CAC5B;QACAhE,UAAUE,KAAQ,UAAQ,QAAOd,KAAKc,KAAK;QAC3Ce,KAAKjB,UAAUE,KAAK;MAAA;IACtB,CACF;IAEM,mBAAaE,SAAS,MAAM;MAChC,OAAOuB,KAAM,eAAcsC,iBAAkB,OAAMxD,MAAM;IAAA,CAC1D;IAEK,mBAAaL,SAAS,MAAM;MAChC,OAAOuB,KAAM,eAAcuC,iBAAkB,OAAMzD,MAAM;IAAA,CAC1D;IAEK,oBAAcL,SAAS,MAAM;MACjC,IAAIoB,aAAc,QAAO,OAAOA,aAAc;MAC9C,IAAI,CAACG,MAAMC,WAAe,KAAC/B,YAAa,QAAO;MAC/C,OAAS,OAAM+B,WAAe,cAAU1B,KAAiB,SACvDiE,WAAWjE,KACb;IAAA,CACD;IAEK,oBAAcE,SAAS,MAAM;MACjC,IAAImB,aAAc,QAAO,OAAOA,aAAc;MAC9C,IAAI,CAACI,MAAMC,WAAe,KAAC/B,YAAa,QAAO;MAC/C,OAAS,OAAM+B,WAAe,cAAU1B,KAAiB,SACvDkE,WAAWlE,KACb;IAAA,CACD;IAEK,0BAAoBH,IAAI,KAAK;IACnC,MAAMsE,yBAAyBA,MAAM;MACnCC,kBAAkBpE,KAAQ;IAAA,CAC5B;IACA,MAAMqE,sBAAsBA,MAAM;MAChCD,kBAAkBpE,KAAQ;IAAA,CAC5B;IAEM,iBAAYM,IAAgB;MACzB;QACLgE,MAAMhE,KAAKgE,IAAK;QAChBC,QAAQjE,KAAKiE,MAAO;QACpBC,QAAQlE,KAAKkE,MAAO;QACpBnE,MAAMC,KAAKD,IAAK;QAChBD,OAAOE,KAAKF,KAAM;QAClBE,MAAMA,KAAKA,IAAK;MAAA,CAClB;IAAA,CACF;IAEA,MAAMmE,cAAiB,IAACzE,KAAc,WAAkB0E,KAAmB;MACzE,MAAM;QAAEJ;QAAMC,MAAQ;QAAAC;MAAA,IAAWG,SAAS3E,KAAK;MAC/C,MAAMwB,OAAU,SAAME,WACjB,SAAMA,WAAsB,MAAK4C,IAAI,EAAEC,MAAO,OAAM,CAAE,QAAOC,MAAM,CACpE;MACJ1E,UAAUE,KAAQ;MACbe,eAAUf,OAAO,IAAI;MAC1B,IAAI,CAAC0E,KAAO;QACVN,kBAAkBpE,KAAQ;MAAA;IAC5B,CACF;IAEM,gCAA2BA,KAAkB;MAC3C,gBAAUG,MAAMH,KAAO,aAAWA,KAAK,CAAE,QAAOd,KAAKc,KAAK;MAChE,IAAIwB,OAAQ,UAAa,yBAAqBA,OAAO,CAAG;QACtD,MAAM;UAAEnB,IAAM;UAAAD;UAAOE;QAAS,aAASR,UAAUE,KAAK;QAC5CF,kBAAQ0B,QAAQnB,IAAK,MAAI,EAAED,KAAM,OAAK,CAAE,MAAKE,IAAI;QAC3DgB,cAActB,KAAQ;QACtBoE,kBAAkBpE,KAAQ;QACrBe,eAAUf,OAAO,IAAI;MAAA;IAC5B,CACF;IAEM,gCAA2BA,KAAkB;MAC3C,gBAAUG,MAAMH,KAAO,aAAWA,KAAK,CAAE,QAAOd,KAAKc,KAAK;MAC5D,YAAQ4E,SAAW;QACrB,IAAIrF,YAAgB,iBAAaiC,OAAQ,SAAQ,CAAG;UAClD;QAAA;QAEF,MAAM;UAAE8C,IAAM;UAAAC;UAAQC;QAAW,aAAS1E,UAAUE,KAAK;QAC/CF,kBAAQ0B,QAAQ8C,IAAK,KAAI,EAAEC,MAAO,OAAM,CAAE,QAAOC,MAAM;QACjEnD,cAAcrB,KAAQ;QACjBe,eAAUf,OAAO,IAAI;MAAA;IAC5B,CACF;IAEM,qBAAgBM,IAAkB;MACtC,OACEH,KAAM,SAAQG,IAAI,KAClBA,IAAK,UACJ,oBAAe,CAACf,aAAae,IAAK,SAAQ,CAAI;IAAA,CAEnD;IAEM,uBAAkBN,KAA2B;MACjD,OAAOkB,QAAQlB,KAAK,IACfA,KAAkB,KAAKtB,CAAM,MAAE6B,MAAO,OAAMA,MAAM,CAAC,IACnDP,KAAgB,QAAOyB,MAAMlB,MAAM;IAAA,CAC1C;IAEM,uBAAkBP,KAAiB;MACvC,OAAOG,MAAMH,KAAO,QAAMO,MAAM,CAAE,QAAOrB,KAAKc,KAAK;IAAA,CACrD;IAEA,MAAM2D,kBAAkBA,MAAM;MAC5B,MAAMkB,YAAY1E,KAAM,cAAaH,KAAK,CAAE,QAAOd,KAAKc,KAAK;MACzD,KAACL,aAAaK,KAAO;QACvB,MAAM8E,oBAAoBnE,YAAa;QACvC,OAAOR,OACJ,MAAK2E,kBAAkBR,IAAK,EAAC,EAC7BC,MAAO,mBAAkBA,QAAQ,EACjCC,OAAOM,iBAAkB,SAAQ,CACjC,QAAO5F,KAAKc,KAAK;MAAA;MAEf;IAAA,CACT;IAEA,MAAM+B,oBAAoB,YAAY;MAChC;MACF,4BAA4B;QACxB,+BAAgC;QAClC,kCAAgC;UAClCgD;QAAA;MACF;IAGF,CAAM;IACJ,wBAAiB;MACjB,MAAM;QAAYC;MAAA;MAAA,MACLC,aACXC,UAAW,KACXA,UAAW,OACXA,UAAW,OACXA,UAAW,QACXA,UAAW,OACXA,UAAW,MACXA,UAAW,SACbA,oBACI;MACF,sBAAqB;QACrBH,gBAAsB;QACtBI,MAAMC,eAAe;QACvBD;MACA;MAOE,eAAqB;QAChBA,sBAAiB;QACxBpE;MAAA;IAGF,CAAM;IAaE,sBAAY,GAAMiE,QAAa;MACrC,MAAM;MAA6B,MAC3B;QAAAK;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;MAAA,MACEC;QAAAxF,IACE;UACR,CAACgF,EAAO;UACR,CAACC,IAAQ;UACT,QAAQ,CAAC,CAAY;UAEvB;UACOQ;QAAA;QACC1F,KACE;UACR,CAACiF,EAAO;UACR,CAACC,IAAQ;UACT,QAAQ,CAAC,CAAY;UAEvB;UACMQ;QAAA;QACEC,IACE;UACR,CAACV,EAAO;UACR,CAACC,IAAQ;UACT,QAAQ,CAAC;UAEX;UACMQ;QAAA;QACExF,IACE;UACR,CAAC+E,EAAO;UACR,CAACC,IAAQ;UACT,CAACC,IAAO,IAAC,CAAe;UACxB,CAACC,KAAM;UACP,CAACC,WAAU,SACJ,OAAK,EAAK;UACjB,CAACC,UAAW,IAAC,KACX,OAAS;UACX,UAAqBpF,iBAAsB,CAAQA,gBAAa,QAAI,CAAI0F;UAC1E;UACFF;QAEA;MACA,CAAO;MACC,yBAA2B;MACjC,OAAKxD;QAAK;QACV,IAAI,CACF2D,KAKE;QACFA;QACF;UACA;QACA;QACY,oBAAQ,QAAQ,CAAI;QAChCnG;QACFmB;QACF;MAEA;IACE;IACF;MAEAA,WACQ,eACN,WAAS;IACP;IACEiF,yBAAoB;MACpB;QACFlD,iBAAmB,GAASmD;QAC1B;MACA;QACFnD;QACA;MAAoB;MAMtBA,WAAkB;IAEhB;MAAAoD,SAAqB;IAAA;IACvBF,KACF;MAEAG,MACQ,iBAAa,GACnBA,MAAS;IACP;IACEH,wBAAkC;MACpC;QAEFpG,SAAa,SACf6D;MAEA;IAGI;MAAAyC,SAAS;IAAA;IACPF,YAAkBzE,mBAAU0E,GAAW;MACrC;QACE,kBAAcnG,KAAG,iDAAG;QACxB,UAAUkB,OAAQ,OACb;QACLpB,UAAUE,QAAQmG,GAAgB;MAAA,CACpC;QAEFrG,SAAa,SACf6D;MAEA;IACA;MAAAyC,SAAiC;IAAA;IACjCnF,YAAY,mBAAqB,GAAC,cAAkB;IACpDA,YAAY,mBAAqB,GAAC,gBAAqB","names":["timeWithinRange","_","___","useNamespace","attrs","useAttrs","slots","useSlots","t","lang","useLocale","inject","TOOLTIP_INJECTION_KEY","shortcuts","disabledDate","cellClassName","defaultTime","pickerBase","defaultValue","currentViewRef","ref","innerDate","locale","value","isShortcut","computed","dayjs","month","year","date","format","emitDayjs","visibleTime","isChangeToNow","defaultTimeD","showTime","millisecond","startOf","emit","args","contextEmit","isArray","formatEmit","dates","userInputDate","userInputTime","keepOpen","newDate","props","parsedValue","checkDateWithinRange","selectableRange","type","nextTick","handleFocusPicker","selectionMode","forward","handlePanelChange","currentDate","action","startYear","Math","yearTranslation","shortcut","isFunction","shortcutValue","onClick","includes","hasShortcuts","length","month2","currentView","year2","view","showDateFooter","isDateView","showYearFooter","toDate","onConfirm","result","defaultTimeD2","defaultValueD","getDefaultValue","changeToNow","now","nowDate","extractTimeFormat","extractDateFormat","timeFormat","dateFormat","onTimePickerInputFocus","timePickerVisible","handleTimePickClose","hour","minute","second","handleTimePick","first","getUnits","isValid","parseDate","defaultTimeDValue","handleKeyControl","code","validCode","EVENT_CODE","event","stopPropagation","up","down","left","right","home","end","pageUp","pageDown","mapping","offset","week","getMonth","map","watch","val","immediate","popper"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/panel-date-pick.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ppNs.b(),\n      dpNs.b(),\n      {\n        'has-sidebar': $slots.sidebar || hasShortcuts,\n        'has-time': showTime,\n      },\n    ]\"\n  >\n    <div :class=\"ppNs.e('body-wrapper')\">\n      <slot name=\"sidebar\" :class=\"ppNs.e('sidebar')\" />\n      <div v-if=\"hasShortcuts\" :class=\"ppNs.e('sidebar')\">\n        <button\n          v-for=\"(shortcut, key) in shortcuts\"\n          :key=\"key\"\n          type=\"button\"\n          :class=\"ppNs.e('shortcut')\"\n          @click=\"handleShortcutClick(shortcut)\"\n        >\n          {{ shortcut.text }}\n        </button>\n      </div>\n      <div :class=\"ppNs.e('body')\">\n        <div v-if=\"showTime\" :class=\"dpNs.e('time-header')\">\n          <span :class=\"dpNs.e('editor-wrap')\">\n            <el-input\n              :placeholder=\"t('el.datepicker.selectDate')\"\n              :model-value=\"visibleDate\"\n              size=\"small\"\n              :validate-event=\"false\"\n              @input=\"(val) => (userInputDate = val)\"\n              @change=\"handleVisibleDateChange\"\n            />\n          </span>\n          <span\n            v-click-outside=\"handleTimePickClose\"\n            :class=\"dpNs.e('editor-wrap')\"\n          >\n            <el-input\n              :placeholder=\"t('el.datepicker.selectTime')\"\n              :model-value=\"visibleTime\"\n              size=\"small\"\n              :validate-event=\"false\"\n              @focus=\"onTimePickerInputFocus\"\n              @input=\"(val) => (userInputTime = val)\"\n              @change=\"handleVisibleTimeChange\"\n            />\n            <time-pick-panel\n              :visible=\"timePickerVisible\"\n              :format=\"timeFormat\"\n              :parsed-value=\"innerDate\"\n              @pick=\"handleTimePick\"\n            />\n          </span>\n        </div>\n        <div\n          v-show=\"currentView !== 'time'\"\n          :class=\"[\n            dpNs.e('header'),\n            (currentView === 'year' || currentView === 'month') &&\n              dpNs.e('header--bordered'),\n          ]\"\n        >\n          <span :class=\"dpNs.e('prev-btn')\">\n            <button\n              type=\"button\"\n              :aria-label=\"t(`el.datepicker.prevYear`)\"\n              class=\"d-arrow-left\"\n              :class=\"ppNs.e('icon-btn')\"\n              @click=\"moveByYear(false)\"\n            >\n              <el-icon><d-arrow-left /></el-icon>\n            </button>\n            <button\n              v-show=\"currentView === 'date'\"\n              type=\"button\"\n              :aria-label=\"t(`el.datepicker.prevMonth`)\"\n              :class=\"ppNs.e('icon-btn')\"\n              class=\"arrow-left\"\n              @click=\"moveByMonth(false)\"\n            >\n              <el-icon><arrow-left /></el-icon>\n            </button>\n          </span>\n          <span\n            role=\"button\"\n            :class=\"dpNs.e('header-label')\"\n            aria-live=\"polite\"\n            tabindex=\"0\"\n            @keydown.enter=\"showPicker('year')\"\n            @click=\"showPicker('year')\"\n            >{{ yearLabel }}</span\n          >\n          <span\n            v-show=\"currentView === 'date'\"\n            role=\"button\"\n            aria-live=\"polite\"\n            tabindex=\"0\"\n            :class=\"[\n              dpNs.e('header-label'),\n              { active: currentView === 'month' },\n            ]\"\n            @keydown.enter=\"showPicker('month')\"\n            @click=\"showPicker('month')\"\n            >{{ t(`el.datepicker.month${month + 1}`) }}</span\n          >\n          <span :class=\"dpNs.e('next-btn')\">\n            <button\n              v-show=\"currentView === 'date'\"\n              type=\"button\"\n              :aria-label=\"t(`el.datepicker.nextMonth`)\"\n              :class=\"ppNs.e('icon-btn')\"\n              class=\"arrow-right\"\n              @click=\"moveByMonth(true)\"\n            >\n              <el-icon><arrow-right /></el-icon>\n            </button>\n            <button\n              type=\"button\"\n              :aria-label=\"t(`el.datepicker.nextYear`)\"\n              :class=\"ppNs.e('icon-btn')\"\n              class=\"d-arrow-right\"\n              @click=\"moveByYear(true)\"\n            >\n              <el-icon><d-arrow-right /></el-icon>\n            </button>\n          </span>\n        </div>\n        <div :class=\"ppNs.e('content')\" @keydown=\"handleKeydownTable\">\n          <date-table\n            v-if=\"currentView === 'date'\"\n            ref=\"currentViewRef\"\n            :selection-mode=\"selectionMode\"\n            :date=\"innerDate\"\n            :parsed-value=\"parsedValue\"\n            :disabled-date=\"disabledDate\"\n            :cell-class-name=\"cellClassName\"\n            @pick=\"handleDatePick\"\n          />\n          <year-table\n            v-if=\"currentView === 'year'\"\n            ref=\"currentViewRef\"\n            :selection-mode=\"selectionMode\"\n            :date=\"innerDate\"\n            :disabled-date=\"disabledDate\"\n            :parsed-value=\"parsedValue\"\n            @pick=\"handleYearPick\"\n          />\n          <month-table\n            v-if=\"currentView === 'month'\"\n            ref=\"currentViewRef\"\n            :date=\"innerDate\"\n            :parsed-value=\"parsedValue\"\n            :disabled-date=\"disabledDate\"\n            @pick=\"handleMonthPick\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-show=\"footerVisible\" :class=\"ppNs.e('footer')\">\n      <el-button\n        v-show=\"selectionMode !== 'dates' && selectionMode !== 'years'\"\n        text\n        size=\"small\"\n        :class=\"ppNs.e('link-btn')\"\n        :disabled=\"disabledNow\"\n        @click=\"changeToNow\"\n      >\n        {{ t('el.datepicker.now') }}\n      </el-button>\n      <el-button\n        plain\n        size=\"small\"\n        :class=\"ppNs.e('link-btn')\"\n        :disabled=\"disabledConfirm\"\n        @click=\"onConfirm\"\n      >\n        {{ t('el.datepicker.confirm') }}\n      </el-button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  inject,\n  nextTick,\n  ref,\n  toRef,\n  useAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport dayjs from 'dayjs'\nimport ElButton from '@element-plus/components/button'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport {\n  TimePickPanel,\n  extractDateFormat,\n  extractTimeFormat,\n} from '@element-plus/components/time-picker'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { isArray, isFunction } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ArrowLeft,\n  ArrowRight,\n  DArrowLeft,\n  DArrowRight,\n} from '@element-plus/icons-vue'\nimport { TOOLTIP_INJECTION_KEY } from '@element-plus/components/tooltip'\nimport { panelDatePickProps } from '../props/panel-date-pick'\nimport DateTable from './basic-date-table.vue'\nimport MonthTable from './basic-month-table.vue'\nimport YearTable from './basic-year-table.vue'\n\nimport type { SetupContext } from 'vue'\nimport type { ConfigType, Dayjs } from 'dayjs'\nimport type { PanelDatePickProps } from '../props/panel-date-pick'\nimport type {\n  DateTableEmits,\n  DatesPickerEmits,\n  WeekPickerEmits,\n  YearsPickerEmits,\n} from '../props/basic-date-table'\n\ntype DatePickType = PanelDatePickProps['type']\n// todo\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst timeWithinRange = (_: ConfigType, __: any, ___: string) => true\nconst props = defineProps(panelDatePickProps)\nconst contextEmit = defineEmits(['pick', 'set-picker-option', 'panel-change'])\nconst ppNs = useNamespace('picker-panel')\nconst dpNs = useNamespace('date-picker')\nconst attrs = useAttrs()\nconst slots = useSlots()\n\nconst { t, lang } = useLocale()\nconst pickerBase = inject('EP_PICKER_BASE') as any\nconst popper = inject(TOOLTIP_INJECTION_KEY)\nconst { shortcuts, disabledDate, cellClassName, defaultTime } = pickerBase.props\nconst defaultValue = toRef(pickerBase.props, 'defaultValue')\n\nconst currentViewRef = ref<{ focus: () => void }>()\n\nconst innerDate = ref(dayjs().locale(lang.value))\n\nconst isChangeToNow = ref(false)\n\nlet isShortcut = false\n\nconst defaultTimeD = computed(() => {\n  return dayjs(defaultTime).locale(lang.value)\n})\n\nconst month = computed(() => {\n  return innerDate.value.month()\n})\n\nconst year = computed(() => {\n  return innerDate.value.year()\n})\n\nconst selectableRange = ref([])\nconst userInputDate = ref<string | null>(null)\nconst userInputTime = ref<string | null>(null)\n// todo update to disableHour\nconst checkDateWithinRange = (date: ConfigType) => {\n  return selectableRange.value.length > 0\n    ? timeWithinRange(date, selectableRange.value, props.format || 'HH:mm:ss')\n    : true\n}\nconst formatEmit = (emitDayjs: Dayjs) => {\n  if (\n    defaultTime &&\n    !visibleTime.value &&\n    !isChangeToNow.value &&\n    !isShortcut\n  ) {\n    return defaultTimeD.value\n      .year(emitDayjs.year())\n      .month(emitDayjs.month())\n      .date(emitDayjs.date())\n  }\n  if (showTime.value) return emitDayjs.millisecond(0)\n  return emitDayjs.startOf('day')\n}\nconst emit = (value: Dayjs | Dayjs[], ...args: any[]) => {\n  if (!value) {\n    contextEmit('pick', value, ...args)\n  } else if (isArray(value)) {\n    const dates = value.map(formatEmit)\n    contextEmit('pick', dates, ...args)\n  } else {\n    contextEmit('pick', formatEmit(value), ...args)\n  }\n  userInputDate.value = null\n  userInputTime.value = null\n  isChangeToNow.value = false\n  isShortcut = false\n}\nconst handleDatePick = async (value: DateTableEmits, keepOpen?: boolean) => {\n  if (selectionMode.value === 'date') {\n    value = value as Dayjs\n    let newDate = props.parsedValue\n      ? (props.parsedValue as Dayjs)\n          .year(value.year())\n          .month(value.month())\n          .date(value.date())\n      : value\n    // change default time while out of selectableRange\n    if (!checkDateWithinRange(newDate)) {\n      newDate = (selectableRange.value[0][0] as Dayjs)\n        .year(value.year())\n        .month(value.month())\n        .date(value.date())\n    }\n    innerDate.value = newDate\n    emit(newDate, showTime.value || keepOpen)\n    // fix: https://github.com/element-plus/element-plus/issues/14728\n    if (props.type === 'datetime') {\n      await nextTick()\n      handleFocusPicker()\n    }\n  } else if (selectionMode.value === 'week') {\n    emit((value as WeekPickerEmits).date)\n  } else if (selectionMode.value === 'dates') {\n    emit(value as DatesPickerEmits, true) // set true to keep panel open\n  }\n}\n\nconst moveByMonth = (forward: boolean) => {\n  const action = forward ? 'add' : 'subtract'\n  innerDate.value = innerDate.value[action](1, 'month')\n  handlePanelChange('month')\n}\n\nconst moveByYear = (forward: boolean) => {\n  const currentDate = innerDate.value\n  const action = forward ? 'add' : 'subtract'\n\n  innerDate.value =\n    currentView.value === 'year'\n      ? currentDate[action](10, 'year')\n      : currentDate[action](1, 'year')\n\n  handlePanelChange('year')\n}\n\nconst currentView = ref('date')\n\nconst yearLabel = computed(() => {\n  const yearTranslation = t('el.datepicker.year')\n  if (currentView.value === 'year') {\n    const startYear = Math.floor(year.value / 10) * 10\n    if (yearTranslation) {\n      return `${startYear} ${yearTranslation} - ${\n        startYear + 9\n      } ${yearTranslation}`\n    }\n    return `${startYear} - ${startYear + 9}`\n  }\n  return `${year.value} ${yearTranslation}`\n})\n\ntype Shortcut = {\n  value: (() => Dayjs) | Dayjs\n  onClick?: (ctx: Omit<SetupContext, 'expose'>) => void\n}\n\nconst handleShortcutClick = (shortcut: Shortcut) => {\n  const shortcutValue = isFunction(shortcut.value)\n    ? shortcut.value()\n    : shortcut.value\n  if (shortcutValue) {\n    isShortcut = true\n    emit(dayjs(shortcutValue).locale(lang.value))\n    return\n  }\n  if (shortcut.onClick) {\n    shortcut.onClick({\n      attrs,\n      slots,\n      emit: contextEmit as SetupContext['emit'],\n    })\n  }\n}\n\nconst selectionMode = computed<DatePickType>(() => {\n  const { type } = props\n  if (['week', 'month', 'year', 'years', 'dates'].includes(type)) return type\n  return 'date' as DatePickType\n})\n\nconst keyboardMode = computed<string>(() => {\n  return selectionMode.value === 'date'\n    ? currentView.value\n    : selectionMode.value\n})\n\nconst hasShortcuts = computed(() => !!shortcuts.length)\n\nconst handleMonthPick = async (month: number) => {\n  innerDate.value = innerDate.value.startOf('month').month(month)\n  if (selectionMode.value === 'month') {\n    emit(innerDate.value, false)\n  } else {\n    currentView.value = 'date'\n    if (['month', 'year', 'date', 'week'].includes(selectionMode.value)) {\n      emit(innerDate.value, true)\n      await nextTick()\n      handleFocusPicker()\n    }\n  }\n  handlePanelChange('month')\n}\n\nconst handleYearPick = async (\n  year: number | YearsPickerEmits,\n  keepOpen?: boolean\n) => {\n  if (selectionMode.value === 'year') {\n    innerDate.value = innerDate.value.startOf('year').year(year as number)\n    emit(innerDate.value, false)\n  } else if (selectionMode.value === 'years') {\n    emit(year as YearsPickerEmits, keepOpen ?? true)\n  } else {\n    innerDate.value = innerDate.value.year(year as number)\n    currentView.value = 'month'\n    if (['month', 'year', 'date', 'week'].includes(selectionMode.value)) {\n      emit(innerDate.value, true)\n      await nextTick()\n      handleFocusPicker()\n    }\n  }\n  handlePanelChange('year')\n}\n\nconst showPicker = async (view: 'month' | 'year') => {\n  currentView.value = view\n  await nextTick()\n  handleFocusPicker()\n}\n\nconst showTime = computed(\n  () => props.type === 'datetime' || props.type === 'datetimerange'\n)\n\nconst footerVisible = computed(() => {\n  const showDateFooter = showTime.value || selectionMode.value === 'dates'\n  const showYearFooter = selectionMode.value === 'years'\n  const isDateView = currentView.value === 'date'\n  const isYearView = currentView.value === 'year'\n  return (showDateFooter && isDateView) || (showYearFooter && isYearView)\n})\n\nconst disabledConfirm = computed(() => {\n  if (!disabledDate) return false\n  if (!props.parsedValue) return true\n  if (isArray(props.parsedValue)) {\n    return disabledDate(props.parsedValue[0].toDate())\n  }\n  return disabledDate(props.parsedValue.toDate())\n})\nconst onConfirm = () => {\n  if (selectionMode.value === 'dates' || selectionMode.value === 'years') {\n    emit(props.parsedValue as Dayjs[])\n  } else {\n    // deal with the scenario where: user opens the date time picker, then confirm without doing anything\n    let result = props.parsedValue as Dayjs\n    if (!result) {\n      const defaultTimeD = dayjs(defaultTime).locale(lang.value)\n      const defaultValueD = getDefaultValue()\n      result = defaultTimeD\n        .year(defaultValueD.year())\n        .month(defaultValueD.month())\n        .date(defaultValueD.date())\n    }\n    innerDate.value = result\n    emit(result)\n  }\n}\n\nconst disabledNow = computed(() => {\n  if (!disabledDate) return false\n  return disabledDate(dayjs().locale(lang.value).toDate())\n})\nconst changeToNow = () => {\n  // NOTE: not a permanent solution\n  //       consider disable \"now\" button in the future\n  const now = dayjs().locale(lang.value)\n  const nowDate = now.toDate()\n  isChangeToNow.value = true\n  if (\n    (!disabledDate || !disabledDate(nowDate)) &&\n    checkDateWithinRange(nowDate)\n  ) {\n    innerDate.value = dayjs().locale(lang.value)\n    emit(innerDate.value)\n  }\n}\n\nconst timeFormat = computed(() => {\n  return props.timeFormat || extractTimeFormat(props.format)\n})\n\nconst dateFormat = computed(() => {\n  return props.dateFormat || extractDateFormat(props.format)\n})\n\nconst visibleTime = computed(() => {\n  if (userInputTime.value) return userInputTime.value\n  if (!props.parsedValue && !defaultValue.value) return\n  return ((props.parsedValue || innerDate.value) as Dayjs).format(\n    timeFormat.value\n  )\n})\n\nconst visibleDate = computed(() => {\n  if (userInputDate.value) return userInputDate.value\n  if (!props.parsedValue && !defaultValue.value) return\n  return ((props.parsedValue || innerDate.value) as Dayjs).format(\n    dateFormat.value\n  )\n})\n\nconst timePickerVisible = ref(false)\nconst onTimePickerInputFocus = () => {\n  timePickerVisible.value = true\n}\nconst handleTimePickClose = () => {\n  timePickerVisible.value = false\n}\n\nconst getUnits = (date: Dayjs) => {\n  return {\n    hour: date.hour(),\n    minute: date.minute(),\n    second: date.second(),\n    year: date.year(),\n    month: date.month(),\n    date: date.date(),\n  }\n}\n\nconst handleTimePick = (value: Dayjs, visible: boolean, first: boolean) => {\n  const { hour, minute, second } = getUnits(value)\n  const newDate = props.parsedValue\n    ? (props.parsedValue as Dayjs).hour(hour).minute(minute).second(second)\n    : value\n  innerDate.value = newDate\n  emit(innerDate.value, true)\n  if (!first) {\n    timePickerVisible.value = visible\n  }\n}\n\nconst handleVisibleTimeChange = (value: string) => {\n  const newDate = dayjs(value, timeFormat.value).locale(lang.value)\n  if (newDate.isValid() && checkDateWithinRange(newDate)) {\n    const { year, month, date } = getUnits(innerDate.value)\n    innerDate.value = newDate.year(year).month(month).date(date)\n    userInputTime.value = null\n    timePickerVisible.value = false\n    emit(innerDate.value, true)\n  }\n}\n\nconst handleVisibleDateChange = (value: string) => {\n  const newDate = dayjs(value, dateFormat.value).locale(lang.value)\n  if (newDate.isValid()) {\n    if (disabledDate && disabledDate(newDate.toDate())) {\n      return\n    }\n    const { hour, minute, second } = getUnits(innerDate.value)\n    innerDate.value = newDate.hour(hour).minute(minute).second(second)\n    userInputDate.value = null\n    emit(innerDate.value, true)\n  }\n}\n\nconst isValidValue = (date: unknown) => {\n  return (\n    dayjs.isDayjs(date) &&\n    date.isValid() &&\n    (disabledDate ? !disabledDate(date.toDate()) : true)\n  )\n}\n\nconst formatToString = (value: Dayjs | Dayjs[]) => {\n  return isArray(value)\n    ? (value as Dayjs[]).map((_) => _.format(props.format))\n    : (value as Dayjs).format(props.format)\n}\n\nconst parseUserInput = (value: Dayjs) => {\n  return dayjs(value, props.format).locale(lang.value)\n}\n\nconst getDefaultValue = () => {\n  const parseDate = dayjs(defaultValue.value).locale(lang.value)\n  if (!defaultValue.value) {\n    const defaultTimeDValue = defaultTimeD.value\n    return dayjs()\n      .hour(defaultTimeDValue.hour())\n      .minute(defaultTimeDValue.minute())\n      .second(defaultTimeDValue.second())\n      .locale(lang.value)\n  }\n  return parseDate\n}\n\nconst handleFocusPicker = async () => {\n  if (['week', 'month', 'year', 'date'].includes(selectionMode.value)) {\n    currentViewRef.value?.focus()\n    if (selectionMode.value === 'week') {\n      handleKeyControl(EVENT_CODE.down)\n    }\n  }\n}\n\nconst handleKeydownTable = (event: KeyboardEvent) => {\n  const { code } = event\n  const validCode = [\n    EVENT_CODE.up,\n    EVENT_CODE.down,\n    EVENT_CODE.left,\n    EVENT_CODE.right,\n    EVENT_CODE.home,\n    EVENT_CODE.end,\n    EVENT_CODE.pageUp,\n    EVENT_CODE.pageDown,\n  ]\n  if (validCode.includes(code)) {\n    handleKeyControl(code)\n    event.stopPropagation()\n    event.preventDefault()\n  }\n  if (\n    [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.numpadEnter].includes(\n      code\n    ) &&\n    userInputDate.value === null &&\n    userInputTime.value === null\n  ) {\n    event.preventDefault()\n    emit(innerDate.value, false)\n  }\n}\n\nconst handleKeyControl = (code: string) => {\n  type KeyControlMappingCallableOffset = (date: Date, step?: number) => number\n  type KeyControl = {\n    [key: string]:\n      | number\n      | KeyControlMappingCallableOffset\n      | ((date: Date, step: number) => any)\n    offset: (date: Date, step: number) => any\n  }\n  interface KeyControlMapping {\n    [key: string]: KeyControl\n  }\n\n  const { up, down, left, right, home, end, pageUp, pageDown } = EVENT_CODE\n  const mapping: KeyControlMapping = {\n    year: {\n      [up]: -4,\n      [down]: 4,\n      [left]: -1,\n      [right]: 1,\n      offset: (date: Date, step: number) =>\n        date.setFullYear(date.getFullYear() + step),\n    },\n    month: {\n      [up]: -4,\n      [down]: 4,\n      [left]: -1,\n      [right]: 1,\n      offset: (date: Date, step: number) =>\n        date.setMonth(date.getMonth() + step),\n    },\n    week: {\n      [up]: -1,\n      [down]: 1,\n      [left]: -1,\n      [right]: 1,\n      offset: (date: Date, step: number) =>\n        date.setDate(date.getDate() + step * 7),\n    },\n    date: {\n      [up]: -7,\n      [down]: 7,\n      [left]: -1,\n      [right]: 1,\n      [home]: (date: Date) => -date.getDay(),\n      [end]: (date: Date) => -date.getDay() + 6,\n      [pageUp]: (date: Date) =>\n        -new Date(date.getFullYear(), date.getMonth(), 0).getDate(),\n      [pageDown]: (date: Date) =>\n        new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate(),\n      offset: (date: Date, step: number) => date.setDate(date.getDate() + step),\n    },\n  }\n\n  const newDate = innerDate.value.toDate()\n  while (Math.abs(innerDate.value.diff(newDate, 'year', true)) < 1) {\n    const map = mapping[keyboardMode.value]\n    if (!map) return\n    map.offset(\n      newDate,\n      isFunction(map[code])\n        ? (map[code] as unknown as KeyControlMappingCallableOffset)(newDate)\n        : (map[code] as number) ?? 0\n    )\n    if (disabledDate && disabledDate(newDate)) {\n      break\n    }\n    const result = dayjs(newDate).locale(lang.value)\n    innerDate.value = result\n    contextEmit('pick', result, true)\n    break\n  }\n}\n\nconst handlePanelChange = (mode: 'month' | 'year') => {\n  contextEmit('panel-change', innerDate.value.toDate(), mode, currentView.value)\n}\n\nwatch(\n  () => selectionMode.value,\n  (val) => {\n    if (['month', 'year'].includes(val)) {\n      currentView.value = val\n      return\n    } else if (val === 'years') {\n      currentView.value = 'year'\n      return\n    }\n    currentView.value = 'date'\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => currentView.value,\n  () => {\n    popper?.updatePopper()\n  }\n)\n\nwatch(\n  () => defaultValue.value,\n  (val) => {\n    if (val) {\n      innerDate.value = getDefaultValue()\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.parsedValue,\n  (val) => {\n    if (val) {\n      if (selectionMode.value === 'dates' || selectionMode.value === 'years')\n        return\n      if (Array.isArray(val)) return\n      innerDate.value = val\n    } else {\n      innerDate.value = getDefaultValue()\n    }\n  },\n  { immediate: true }\n)\n\ncontextEmit('set-picker-option', ['isValidValue', isValidValue])\ncontextEmit('set-picker-option', ['formatToString', formatToString])\ncontextEmit('set-picker-option', ['parseUserInput', parseUserInput])\ncontextEmit('set-picker-option', ['handleFocusPicker', handleFocusPicker])\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}