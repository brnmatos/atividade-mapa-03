{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport Stomp from 'webstomp-client';\nconst SUBSCRIPTIONS = {};\nlet socket = null;\nlet stompCLient;\nlet prefixUrl = '';\nconst connect = () => {\n  console.log('rotina desativada de WS');\n  /*    return new Promise((resolve, reject) => {\n          socket = new SockJS(\n              'http://localhost:9090/ws'\n          );\n          stompCLient = Stomp.over(socket);\n          stompCLient.connect(\n              {\n                  Authorization: 'Bearer JWT'              \n              },\n              () => {\n                  const { sessionId } = socket._transport.url.match(/\\/(?<sessionId>[^/]+?)\\/websocket$/).groups;\n                  prefixUrl = `/user/${sessionId}`;\n                  resolve();\n              },\n              err => {\n                  reject(err);\n              }\n          );\n      });\n    */\n};\nconst subscribe = (suffixUrl, callback) => {\n  const url = prefixUrl + suffixUrl;\n  //const url = '/user/Admin' + suffixUrl;\n  const subscription = stompCLient.subscribe(url, response => {\n    if (typeof callback !== 'function') {\n      return;\n    }\n    let json = response.body;\n    if (typeof json === 'string') {\n      try {\n        json = JSON.parse(json);\n      } catch {\n        console.error('Erro fatal.');\n      }\n    }\n    callback(json);\n  });\n  SUBSCRIPTIONS[suffixUrl] = subscription;\n};\nexport { connect, subscribe };","map":{"version":3,"names":["SockJS","Stomp","SUBSCRIPTIONS","socket","stompCLient","prefixUrl","connect","console","log","subscribe","suffixUrl","callback","url","subscription","response","json","body","JSON","parse","error"],"sources":["C:/app/projects/00-MavenProjects/02-ecommerce-example-pos/frontend/src/utils/websocket.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport Stomp from 'webstomp-client';\n\nconst SUBSCRIPTIONS = {};\n\nlet socket = null;\nlet stompCLient;\nlet prefixUrl = '';\n\nconst connect = () => {\nconsole.log('rotina desativada de WS');\n/*    return new Promise((resolve, reject) => {\n        socket = new SockJS(\n            'http://localhost:9090/ws'\n        );\n        stompCLient = Stomp.over(socket);\n        stompCLient.connect(\n            {\n                Authorization: 'Bearer JWT'              \n            },\n            () => {\n                const { sessionId } = socket._transport.url.match(/\\/(?<sessionId>[^/]+?)\\/websocket$/).groups;\n                prefixUrl = `/user/${sessionId}`;\n                resolve();\n            },\n            err => {\n                reject(err);\n            }\n        );\n    });\n  */  \n}; \n\nconst subscribe = (suffixUrl, callback) => {\n    const url = prefixUrl + suffixUrl;\n    //const url = '/user/Admin' + suffixUrl;\n    const subscription = stompCLient.subscribe(url, (response) => {\n        if(typeof callback !== 'function'){\n            return;\n        }\n\n        let json = response.body;\n\n        if(typeof json === 'string'){\n            try{\n                json = JSON.parse(json);\n            }catch{\n                console.error('Erro fatal.');\n            }\n        }\n        callback(json);\n    });\n\n    SUBSCRIPTIONS[suffixUrl] = subscription;\n        \n};\n\nexport {\n    connect,\n    subscribe\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,iBAAiB;AAEnC,MAAMC,aAAa,GAAG,CAAC,CAAC;AAExB,IAAIC,MAAM,GAAG,IAAI;AACjB,IAAIC,WAAW;AACf,IAAIC,SAAS,GAAG,EAAE;AAElB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACtBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,SAAS,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;EACvC,MAAMC,GAAG,GAAGP,SAAS,GAAGK,SAAS;EACjC;EACA,MAAMG,YAAY,GAAGT,WAAW,CAACK,SAAS,CAACG,GAAG,EAAGE,QAAQ,IAAK;IAC1D,IAAG,OAAOH,QAAQ,KAAK,UAAU,EAAC;MAC9B;IACJ;IAEA,IAAII,IAAI,GAAGD,QAAQ,CAACE,IAAI;IAExB,IAAG,OAAOD,IAAI,KAAK,QAAQ,EAAC;MACxB,IAAG;QACCA,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAC3B,CAAC,OAAK;QACFR,OAAO,CAACY,KAAK,CAAC,aAAa,CAAC;MAChC;IACJ;IACAR,QAAQ,CAACI,IAAI,CAAC;EAClB,CAAC,CAAC;EAEFb,aAAa,CAACQ,SAAS,CAAC,GAAGG,YAAY;AAE3C,CAAC;AAED,SACIP,OAAO,EACPG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}