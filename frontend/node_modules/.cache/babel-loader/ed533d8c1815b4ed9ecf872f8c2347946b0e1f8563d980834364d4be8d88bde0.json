{"ast":null,"code":"import { defineComponent, inject, ref, computed, watch, toRaw, unref, createVNode, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { useProps } from './useProps.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nvar ElSelectMenu = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    loading: Boolean,\n    data: {\n      type: Array,\n      required: true\n    },\n    hoveringIndex: Number,\n    width: Number\n  },\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const {\n      getLabel,\n      getValue,\n      getDisabled\n    } = useProps(select.props);\n    const cachedHeights = ref([]);\n    const listRef = ref();\n    const size = computed(() => props.data.length);\n    watch(() => size.value, () => {\n      var _a, _b;\n      (_b = (_a = select.tooltipRef.value).updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n      return arr && arr.some(item => {\n        return toRaw(get(item, valueKey)) === get(target, valueKey);\n      });\n    };\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n    const isItemSelected = (modelValue, target) => {\n      if (select.props.multiple) {\n        return contains(modelValue, getValue(target));\n      }\n      return isEqual(modelValue, getValue(target));\n    };\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n    const isItemHovering = target => props.hoveringIndex === target;\n    const scrollToItem = index => {\n      const list = listRef.value;\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n    const resetScrollTop = () => {\n      const list = listRef.value;\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n    expose({\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    });\n    const Item = itemProps => {\n      const {\n        index,\n        data,\n        style\n      } = itemProps;\n      const sized = unref(isSized);\n      const {\n        itemSize,\n        estimatedSize\n      } = unref(listProps);\n      const {\n        modelValue\n      } = select.props;\n      const {\n        onSelect,\n        onHover\n      } = select;\n      const item = data[index];\n      if (item.type === \"Group\") {\n        return createVNode(GroupItem, {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n      const isSelected = isItemSelected(modelValue, item);\n      const isDisabled = isItemDisabled(modelValue, isSelected);\n      const isHovering = isItemHovering(index);\n      return createVNode(OptionItem, mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": getDisabled(item) || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        default: props2 => {\n          var _a;\n          return ((_a = slots.default) == null ? void 0 : _a.call(slots, props2)) || createVNode(\"span\", null, [getLabel(item)]);\n        }\n      });\n    };\n    const {\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const onForward = () => {\n      onKeyboardNavigate(\"forward\");\n    };\n    const onBackward = () => {\n      onKeyboardNavigate(\"backward\");\n    };\n    const onEscOrTab = () => {\n      select.expanded = false;\n    };\n    const onKeydown = e => {\n      const {\n        code\n      } = e;\n      const {\n        tab,\n        esc,\n        down,\n        up,\n        enter\n      } = EVENT_CODE;\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      switch (code) {\n        case tab:\n        case esc:\n          {\n            onEscOrTab();\n            break;\n          }\n        case down:\n          {\n            onForward();\n            break;\n          }\n        case up:\n          {\n            onBackward();\n            break;\n          }\n        case enter:\n          {\n            onKeyboardSelect();\n            break;\n          }\n      }\n    };\n    return () => {\n      var _a, _b, _c, _d;\n      const {\n        data,\n        width\n      } = props;\n      const {\n        height,\n        multiple,\n        scrollbarAlwaysOn\n      } = select.props;\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList;\n      return createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)],\n        \"style\": {\n          width: `${width}px`\n        }\n      }, [(_a = slots.header) == null ? void 0 : _a.call(slots), ((_b = slots.loading) == null ? void 0 : _b.call(slots)) || ((_c = slots.empty) == null ? void 0 : _c.call(slots)) || createVNode(List, mergeProps({\n        \"ref\": listRef\n      }, unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        default: props2 => createVNode(Item, props2, null)\n      }), (_d = slots.footer) == null ? void 0 : _d.call(slots)]);\n    };\n  }\n});\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AA0BA,mBAAeA,eAAe,CAAC;EAC7BC,IAAI,EAAE,kBADuB;EAG7BC,KAAK,EAAE;IACLC,OAAO,EAAEC,OADJ;IAELC,IAAI,EAAE;MACJC,IAAI,EAAEC,KADF;MAEJC,QAAQ,EAAE;KAJP;IAMLC,aAAa,EAAEC,MANV;IAOLC,KAAK,EAAED;GAVoB;;IAYxBE;IAAUA;EAAOC;IAAU;IAC9B,MAAMC,EAAM;IACZ,MAAMC;MACAC;MAAEA,QAAF;MAAYC;IAAUC;IAAtB,MAA8CC,aAAO,MAAP,CAApD;IAEA,MAAMA,OAAa;IAEnB,MAAMC,OAAOC,QAAb;IAEAC,KAAMC,OAAOF,UAAS;MACtBC,IACEE,EAAMD;MAEJT,MAAM,CAACW,WAAWC,WAAlB;IACD,CAJE,CAAL;IAOA,MAAMC,OAAO,GAAGN,QAAQ,CAAC,MACvBO,WAAW,CAACd,MAAM,CAACZ,KAAP,CAAa2B,qBAAd,CADW,CAAxB;IAGA,MAAMC,SAAS,GAAGT,QAAQ,CAAC,MAAM;MAC/B,IAAIM,OAAO,CAACD,KAAZ,EAAmB;QACjB,OAAO;UACLK,QAAQ,EAAEjB,MAAM,CAACZ,KAAP,CAAa8B;SADzB;MAGD;;QAEMC;QACLA,aAAenB,iBADV;MAELiB;MAFK;IAIR,MAXDG;;QAaMA;UACEC;QACJjC;MAASiC;MAAF;QADH,OAANC;;MAIA,OAAKC,OAASC,QAAS;QACrB,OAAOF,wBAAP;MACD;;IAED,aAEEA,YAAUG,QAAS;MACjB,aAAY,UAAI;QAHpB;OATF;;UAgBMC;QACJ,IAAKH,OAAQnC,KAACoC;QACZ,OAAOG,cAAPN;MACD;;IACSA;UAAarB,YAArB;QACA,OAAO4B,QAAG,qBAAyBA,OAAIJ,EAAD;MACvC;MANH;;IASA,MAAMK,cAAc,GAAGC,CAACC,UAAD,EAA0BP,QAAmB;MAClE,MAAU;QACRQ,QAAOZ;QACRa;;OACMP,eAAO;MAJhB;;IAOA,MAAMI,cAAc,GAAIC,MAAD,uBAAgD;UAC/DG;YAAAC;UAAAA;QAAsBC;;IAC5B;IAOD,MATDC;;MAWMC;;;IAGJ;;MACAhC;aACO4B;MACNJ;MAJHQ;;MAOMD;MACJA;;IACA,MAAIF,IAAJ,GAAUI;MACRJ,MAAI;QACLK;QAJHjD;;MAOAQ,IAAMwC,SAAC;MACLjC,MADKmC;MAEL5B,MAFK;QAAAI;QAAAE;OAAA;MAOLe,MAPK;QAQLG;MARK,CAAP;;QAWMK,QAAQH;QACNI;UAAA3C;YAAAyB;MAAemB;QAAf,OAANC;UACA,MAAW,MAAQ;UACb;UAAA;QAAY1B;;MAClB,MAAM2B;MAAEf;MAAF,MAAiB/B,UAAvB;MACA,OAAM6C;QAAEE,UAAF;QAAYJ;QAAZ,SAAN;QACA,UAAU,EAAOK,UAAjB;;QACA,UAAI;QACF;MAAA;QAAAC;UAAA,IAIaR;UAJb;QAOD;;IAED;IACA;MACAS,kBAAgB;MAChBC;IAAA;IAAA,kBAIyBC;MAJzBF,kBAKmB,UALnB;IAAA;IAAA;MAAAA;;IAAA;MAYMD,eAAU7D,GACRU;IAbR;IAiBD,MAEDuD;;;OACM;MAAEH,MAAF;QAAsBC;QAAqBnD,GAAjD;;QAEMoD;QACcE;OADpB;;QAIMC,gBAAmB;QACLC,iBAAC;;;QAGfC;QACE,KAACC,GAAP;UAAA;YADFD;;;QAKQ;UAAA;YAAEE;YAASH;;QACTI,KAAFC;UAAA;YAAAN;YAAA;;QAAsBD;UAAAA;YAAUQ,gBAAtC;;;MAEEN;IACAA;IACD;;MAED;QACEjE;QACAM;MAAU;YACR4D;QACAM;QACD9B;;MACD;MAAW;aACAY;QACT;QACD;;QACD;MAAS;aACG;MACV;QACD;;QACD;QAAY;eACM;QAChB;QACD;MAjBH;QARFI;;IA6BA","names":["defineComponent","name","props","loading","Boolean","data","type","Array","required","hoveringIndex","Number","width","slots","expose","select","ns","getLabel","getValue","getDisabled","cachedHeights","listRef","computed","watch","size","_a","tooltipRef","value","isSized","isUndefined","estimatedOptionHeight","listProps","itemSize","itemHeight","estimatedSize","contains","valueKey","arr","isObject","target","item","isEqual","selected","get","isItemSelected","isItemDisabled","modelValue","disabled","multiple","scrollToItem","list","multipleLimit","resetScrollTop","isItemHovering","itemProps","index","sized","Item","onHover","style","_createVNode","isSelected","onSelect","isHovering","default","onKeyboardNavigate","onKeyboardSelect","onForward","onKeydown","enter","onBackward","e","onEscOrTab","expanded","code","tab","up","EVENT_CODE","height"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  ref,\n  toRaw,\n  unref,\n  watch,\n} from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\nimport { useProps } from './useProps'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    loading: Boolean,\n    data: {\n      type: Array,\n      required: true,\n    },\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props, { slots, expose }) {\n    const select = inject(selectV2InjectionKey)!\n    const ns = useNamespace('select')\n    const { getLabel, getValue, getDisabled } = useProps(select.props)\n\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref()\n\n    const size = computed(() => props.data.length)\n    watch(\n      () => size.value,\n      () => {\n        select.tooltipRef.value.updatePopper?.()\n      }\n    )\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return toRaw(get(item, valueKey)) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      if (select.props.multiple) {\n        return contains(modelValue, getValue(target))\n      }\n      return isEqual(modelValue, getValue(target))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    expose({\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop,\n    })\n\n    const Item = (itemProps: ItemProps<any>) => {\n      const { index, data, style } = itemProps\n      const sized = unref(isSized)\n      const { itemSize, estimatedSize } = unref(listProps)\n      const { modelValue } = select.props\n      const { onSelect, onHover } = select\n      const item = data[index]\n      if (item.type === 'Group') {\n        return (\n          <GroupItem\n            item={item}\n            style={style}\n            height={(sized ? itemSize : estimatedSize) as number}\n          />\n        )\n      }\n\n      const isSelected = isItemSelected(modelValue, item)\n      const isDisabled = isItemDisabled(modelValue, isSelected)\n      const isHovering = isItemHovering(index)\n      return (\n        <OptionItem\n          {...itemProps}\n          selected={isSelected}\n          disabled={getDisabled(item) || isDisabled}\n          created={!!item.created}\n          hovering={isHovering}\n          item={item}\n          onSelect={onSelect}\n          onHover={onHover}\n        >\n          {{\n            default: (props: OptionItemProps) =>\n              slots.default?.(props) || <span>{getLabel(item)}</span>,\n          }}\n        </OptionItem>\n      )\n    }\n\n    // computed\n    const { onKeyboardNavigate, onKeyboardSelect } = select\n\n    const onForward = () => {\n      onKeyboardNavigate('forward')\n    }\n\n    const onBackward = () => {\n      onKeyboardNavigate('backward')\n    }\n\n    const onEscOrTab = () => {\n      select.expanded = false\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      const { code } = e\n      const { tab, esc, down, up, enter } = EVENT_CODE\n      if (code !== tab) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      switch (code) {\n        case tab:\n        case esc: {\n          onEscOrTab()\n          break\n        }\n        case down: {\n          onForward()\n          break\n        }\n        case up: {\n          onBackward()\n          break\n        }\n        case enter: {\n          onKeyboardSelect()\n          break\n        }\n      }\n    }\n\n    return () => {\n      const { data, width } = props\n      const { height, multiple, scrollbarAlwaysOn } = select.props\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList\n\n      return (\n        <div\n          class={[ns.b('dropdown'), ns.is('multiple', multiple)]}\n          style={{\n            width: `${width}px`,\n          }}\n        >\n          {slots.header?.()}\n          {slots.loading?.() || slots.empty?.() || (\n            <List\n              ref={listRef}\n              {...unref(listProps)}\n              className={ns.be('dropdown', 'list')}\n              scrollbarAlwaysOn={scrollbarAlwaysOn}\n              data={data}\n              height={height}\n              width={width}\n              total={data.length}\n              // @ts-ignore - dts problem\n              onKeydown={onKeydown}\n            >\n              {{\n                default: (props: ItemProps<any>) => <Item {...props} />,\n              }}\n            </List>\n          )}\n          {slots.footer?.()}\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}