{"ast":null,"code":"import { defineComponent, computed, unref, reactive, toRefs, getCurrentInstance, onBeforeUnmount, nextTick, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createElementVNode, toDisplayString, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useOption } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElOption\",\n  componentName: \"ElOption\",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: Boolean\n  },\n  setup(props) {\n    const ns = useNamespace(\"select\");\n    const id = useId();\n    const containerKls = computed(() => [ns.be(\"dropdown\", \"item\"), ns.is(\"disabled\", unref(isDisabled)), ns.is(\"selected\", unref(itemSelected)), ns.is(\"hovering\", unref(hover))]);\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hover: false\n    });\n    const {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      updateOption\n    } = useOption(props, states);\n    const {\n      visible,\n      hover\n    } = toRefs(states);\n    const vm = getCurrentInstance().proxy;\n    select.onOptionCreate(vm);\n    onBeforeUnmount(() => {\n      const key = vm.value;\n      const {\n        selected\n      } = select.states;\n      const selectedOptions = select.props.multiple ? selected : [selected];\n      const doesSelected = selectedOptions.some(item => {\n        return item.value === vm.value;\n      });\n      nextTick(() => {\n        if (select.states.cachedOptions.get(key) === vm && !doesSelected) {\n          select.states.cachedOptions.delete(key);\n        }\n      });\n      select.onOptionDestroy(key, vm);\n    });\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm);\n      }\n    }\n    return {\n      ns,\n      id,\n      containerKls,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      updateOption,\n      visible,\n      hover,\n      selectOptionClick,\n      states\n    };\n  }\n});\nconst _hoisted_1 = [\"id\", \"aria-disabled\", \"aria-selected\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"li\", {\n    id: _ctx.id,\n    class: normalizeClass(_ctx.containerKls),\n    role: \"option\",\n    \"aria-disabled\": _ctx.isDisabled || void 0,\n    \"aria-selected\": _ctx.itemSelected,\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createElementVNode(\"span\", null, toDisplayString(_ctx.currentLabel), 1)])], 42, _hoisted_1)), [[vShow, _ctx.visible]]);\n}\nvar Option = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"option.vue\"]]);\nexport { Option as default };","map":{"version":3,"mappings":";;;;;;AAiCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,aAAe;EAEfC,KAAO;IAILC,KAAO;MACLC,QAAU;MACVC,IAAM,GAACC,MAAQ,UAAQC,SAASC,MAAM;IAAA,CACxC;IAIAC,OAAO,CAACH,QAAQI,MAAM;IACtBC,OAAS;IAITC,QAAU;EAAA,CACZ;EAEAC,MAAMX,KAAO;IACL,WAAKY,aAAa,QAAQ;IAChC,MAAMC,KAAKC,KAAM;IAEX,qBAAeC,SAAS,MAAM,CAClCC,GAAGC,EAAG,aAAY,MAAM,GACxBD,EAAG,IAAG,UAAY,QAAME,UAAU,CAAC,GACnCF,EAAG,IAAG,UAAY,QAAMG,YAAY,CAAC,GACrCH,EAAG,IAAG,UAAY,QAAMI,KAAK,CAAC,EAC/B;IAED,MAAMC,SAASC,QAAS;MACtBC,KAAO;MACPC,aAAe;MACfC,OAAS;MACTL,KAAO;IAAA,CACR;IAEK;MACJM;MACAP;MACAD;MACAS;MACAC;MACAC;IAAA,CACE,aAAU7B,OAAOqB,MAAM;IAE3B,MAAM;MAAEI;MAASL;IAAU,WAAOC,MAAM;IAElC,WAAKS,oBAAqB;IAEhCH,OAAOI,eAAeC,EAAE;IAExBC,gBAAgB,MAAM;MACpB,MAAMC,MAAMF,EAAG;MACT;QAAEG;MAAA,IAAaR,MAAO;MAC5B,MAAMS,kBAAkBT,MAAO,OAAMU,QAAW,cAAW,CAACF,QAAQ;MACpE,MAAMG,YAAe,mBAAgBC,IAAK,CAACC,IAAS;QAC3C,YAAKvC,UAAU+B,EAAG;MAAA,CAC1B;MAEDS,SAAS,MAAM;QACT,WAAOpB,OAAOqB,aAAc,KAAIR,GAAG,CAAM,WAAM,CAACI,YAAc;UACzDX,cAAOe,aAAc,QAAOR,GAAG;QAAA;MACxC,CACD;MACMP,uBAAgBO,KAAKF,EAAE;IAAA,CAC/B;IAE4B;MAC3B,IAAIhC,KAAM,cAAa,IAAQ,WAAOwB,kBAAkB,IAAM;QAC5DG,OAAOgB,mBAAmBX,EAAE;MAAA;IAC9B;IAGK;MACLhB;MACAH;MACA+B;MACAlB;MACAP;MACAD;MACAS;MACAC;MACAC;MACAJ;MACAL;MACAyB;MACAxB;IAAA,CACF;EAAA;AAEJ,CAAC;;;sCA9HCyB,kBAaK;IAXFjC,EAAI;IACJkC,OAAKC,eAAEC,IAAY;IACpBC,IAAK;IACJ,iBAAeD,IAAc;IAC7B,eAAe;IACfE,cAAUC,MAAE;IACZC,SAAKD,qDAAOH,IAAiB;EAAA,IAE9BK,WAEOL,4BAFP,MAEO,CADLM,mBAA+B,8BAAtBN,IAAY,kDAVfA,IAAO","names":["_sfc_main","defineComponent","name","componentName","props","value","required","type","String","Boolean","Object","label","Number","created","disabled","setup","useNamespace","id","useId","computed","ns","be","isDisabled","itemSelected","hover","states","reactive","index","groupDisabled","visible","currentLabel","select","hoverItem","updateOption","getCurrentInstance","onOptionCreate","vm","onBeforeUnmount","key","selected","selectedOptions","multiple","doesSelected","some","item","nextTick","cachedOptions","handleOptionSelect","containerKls","selectOptionClick","_createElementBlock","class","_normalizeClass","_ctx","role","onMouseenter","_cache","onClick","_renderSlot","_createElementVNode"],"sources":["../../../../../../packages/components/select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    :id=\"id\"\n    :class=\"containerKls\"\n    role=\"option\"\n    :aria-disabled=\"isDisabled || undefined\"\n    :aria-selected=\"itemSelected\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  onBeforeUnmount,\n  reactive,\n  toRefs,\n  unref,\n} from 'vue'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    /**\n     * @description value of option\n     */\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    /**\n     * @description label of option, same as `value` if omitted\n     */\n    label: [String, Number],\n    created: Boolean,\n    /**\n     * @description whether option is disabled\n     */\n    disabled: Boolean,\n  },\n\n  setup(props) {\n    const ns = useNamespace('select')\n    const id = useId()\n\n    const containerKls = computed(() => [\n      ns.be('dropdown', 'item'),\n      ns.is('disabled', unref(isDisabled)),\n      ns.is('selected', unref(itemSelected)),\n      ns.is('hovering', unref(hover)),\n    ])\n\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hover: false,\n    })\n\n    const {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      updateOption,\n    } = useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy as unknown as SelectOptionProxy\n\n    select.onOptionCreate(vm)\n\n    onBeforeUnmount(() => {\n      const key = vm.value\n      const { selected } = select.states\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === vm.value\n      })\n      // if option is not selected, remove it from cache\n      nextTick(() => {\n        if (select.states.cachedOptions.get(key) === vm && !doesSelected) {\n          select.states.cachedOptions.delete(key)\n        }\n      })\n      select.onOptionDestroy(key, vm)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm)\n      }\n    }\n\n    return {\n      ns,\n      id,\n      containerKls,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      updateOption,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}