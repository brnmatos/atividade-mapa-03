{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, getCurrentInstance, provide, reactive, toRefs, computed, onMounted, withDirectives, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, renderSlot, vShow } from 'vue';\nimport { isArray } from '@vue/shared';\nimport { useMutationObserver } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { selectGroupKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElOptionGroup\",\n  componentName: \"ElOptionGroup\",\n  props: {\n    label: String,\n    disabled: Boolean\n  },\n  setup(props) {\n    const ns = useNamespace(\"select\");\n    const groupRef = ref(null);\n    const instance = getCurrentInstance();\n    const children = ref([]);\n    provide(selectGroupKey, reactive({\n      ...toRefs(props)\n    }));\n    const visible = computed(() => children.value.some(option => option.visible === true));\n    const flattedChildren = node => {\n      const children2 = [];\n      if (isArray(node.children)) {\n        node.children.forEach(child => {\n          var _a, _b;\n          if (child.type && child.type.name === \"ElOption\" && child.component && child.component.proxy) {\n            children2.push(child.component.proxy);\n          } else if ((_a = child.children) == null ? void 0 : _a.length) {\n            children2.push(...flattedChildren(child));\n          } else if ((_b = child.component) == null ? void 0 : _b.subTree) {\n            children2.push(...flattedChildren(child.component.subTree));\n          }\n        });\n      }\n      return children2;\n    };\n    const updateChildren = () => {\n      children.value = flattedChildren(instance.subTree);\n    };\n    onMounted(() => {\n      updateChildren();\n    });\n    useMutationObserver(groupRef, updateChildren, {\n      attributes: true,\n      subtree: true,\n      childList: true\n    });\n    return {\n      groupRef,\n      visible,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"ul\", {\n    ref: \"groupRef\",\n    class: normalizeClass(_ctx.ns.be(\"group\", \"wrap\"))\n  }, [createElementVNode(\"li\", {\n    class: normalizeClass(_ctx.ns.be(\"group\", \"title\"))\n  }, toDisplayString(_ctx.label), 3), createElementVNode(\"li\", null, [createElementVNode(\"ul\", {\n    class: normalizeClass(_ctx.ns.b(\"group\"))\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)])], 2)), [[vShow, _ctx.visible]]);\n}\nvar OptionGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"option-group.vue\"]]);\nexport { OptionGroup as default };","map":{"version":3,"mappings":";;;;;;;;AA4BA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,aAAe;EAEfC,KAAO;IAILC,KAAO;IAIPC,QAAU;EAAA,CACZ;EACAC,MAAMH,KAAO;IACL,WAAKI,aAAa,QAAQ;IAC1B,iBAAWC,IAAI,IAAI;IACzB,MAAMC,WAAWC,kBAAmB;IAC9B,iBAAWF,GAAI,GAAE;IAEvBG,QACEC,gBACAC,QAAS;MACP,GAAGC,OAAOX,KAAK;IAAA,CAChB,CACH;IAEM,gBAAUY,QAAS,OACvBC,QAAS,OAAMC,IAAK,CAACC,MAAW,WAAOC,OAAY,SAAI,CACzD;IAGM,wBAAmBC,IAAS;MAChC,MAAMC,YAAW,EAAC;MACd,YAAQD,IAAK,SAAQ,CAAG;QACrBA,cAASE,OAAQ,CAACC,KAAU;UAE7B,UAAM;UAKG,kBAAWA,eAAU,KAAK;YACrCF,SAAW,CAAMG,oBAAkB;UACjC,YAASC,EAAK,QAAmB,qBAAM;YACzCJ,SAAW,CAAMG,uBAAoB;UACnC,YAASE,KAAKH,KAAG,eAAsB,0BAAkB;YAC3DF;UAAA;QACD,CACH;MACA;MACF;IAEA;IACW,oBAAwB;MACnCL;IAEA;IACiBW;MAChBC;IAED;IAA8CC,mBAChC;MACZC,UAAS;MACTC,OAAW;MACZC;IAED,CAAO;IACL;MACAC;MACAd;MACFe;IAAA,CACF;EACF;;yCA7FO;EAAA,OAPoBC;IAAY3B,eAAO;IAAK4B;KACM,CAAhDC,kBAAO;IAAKD,qBAA4B;EAAA,CAKxC,qDADE,cAFAC,kBAAO;IAAID;KACN,mDAJK","names":["_sfc_main","defineComponent","name","componentName","props","label","disabled","setup","useNamespace","ref","instance","getCurrentInstance","provide","selectGroupKey","reactive","toRefs","computed","children","some","option","visible","node","children2","forEach","child","push","_a","_b","onMounted","updateChildren","useMutationObserver","attributes","subtree","childList","groupRef","ns","_withDirectives","class","_createElementVNode"],"sources":["../../../../../../packages/components/select/src/option-group.vue"],"sourcesContent":["<template>\n  <ul v-show=\"visible\" ref=\"groupRef\" :class=\"ns.be('group', 'wrap')\">\n    <li :class=\"ns.be('group', 'title')\">{{ label }}</li>\n    <li>\n      <ul :class=\"ns.b('group')\">\n        <slot />\n      </ul>\n    </li>\n  </ul>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n} from 'vue'\nimport { isArray } from '@vue/shared'\nimport { useMutationObserver } from '@vueuse/core'\nimport { useNamespace } from '@element-plus/hooks'\nimport { selectGroupKey } from './token'\n\nexport default defineComponent({\n  name: 'ElOptionGroup',\n  componentName: 'ElOptionGroup',\n\n  props: {\n    /**\n     * @description name of the group\n     */\n    label: String,\n    /**\n     * @description whether to disable all options in this group\n     */\n    disabled: Boolean,\n  },\n  setup(props) {\n    const ns = useNamespace('select')\n    const groupRef = ref(null)\n    const instance = getCurrentInstance()\n    const children = ref([])\n\n    provide(\n      selectGroupKey,\n      reactive({\n        ...toRefs(props),\n      })\n    )\n\n    const visible = computed(() =>\n      children.value.some((option) => option.visible === true)\n    )\n\n    // get all instances of options\n    const flattedChildren = (node) => {\n      const children = []\n      if (isArray(node.children)) {\n        node.children.forEach((child) => {\n          if (\n            child.type &&\n            child.type.name === 'ElOption' &&\n            child.component &&\n            child.component.proxy\n          ) {\n            children.push(child.component.proxy)\n          } else if (child.children?.length) {\n            children.push(...flattedChildren(child))\n          } else if (child.component?.subTree) {\n            children.push(...flattedChildren(child.component.subTree))\n          }\n        })\n      }\n      return children\n    }\n\n    const updateChildren = () => {\n      children.value = flattedChildren(instance.subTree)\n    }\n\n    onMounted(() => {\n      updateChildren()\n    })\n\n    useMutationObserver(groupRef, updateChildren, {\n      attributes: true,\n      subtree: true,\n      childList: true,\n    })\n\n    return {\n      groupRef,\n      visible,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}