{"ast":null,"code":"import { isVNode, defineComponent, provide, unref, createVNode, mergeProps } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useTable } from './use-table.mjs';\nimport { TableV2InjectionKey } from './tokens.mjs';\nimport { tableV2Props } from './table.mjs';\nimport MainTable from './renderers/main-table.mjs';\nimport LeftTable from './renderers/left-table.mjs';\nimport LeftTable$1 from './renderers/right-table.mjs';\nimport RowRenderer from './renderers/row.mjs';\nimport CellRenderer from './renderers/cell.mjs';\nimport HeaderRenderer from './renderers/header.mjs';\nimport HeaderCellRenderer from './renderers/header-cell.mjs';\nimport Footer from './renderers/footer.mjs';\nimport Footer$1 from './renderers/empty.mjs';\nimport Overlay from './renderers/overlay.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\nconst COMPONENT_NAME = \"ElTableV2\";\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"table-v2\");\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n      showEmpty,\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll\n    } = useTable(props);\n    expose({\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow\n    });\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      isScrolling\n    });\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width\n      } = props;\n      const _data = unref(data);\n      const mainTableProps = {\n        cache,\n        class: ns.e(\"main\"),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth) + vScrollbarSize,\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll\n      };\n      const leftColumnsWidth = unref(leftTableWidth);\n      const _fixedTableHeight = unref(fixedTableHeight);\n      const leftTableProps = {\n        cache,\n        class: ns.e(\"left\"),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const rightColumnsWidth = unref(rightTableWidth);\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;\n      const rightTableProps = {\n        cache,\n        class: ns.e(\"right\"),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(ns.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const _columnsStyles = unref(columnsStyles);\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange\n      };\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns\n      };\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles\n      };\n      const tableHeaderCellProps = {\n        ns,\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted\n      };\n      const tableSlots = {\n        row: props2 => createVNode(RowRenderer, mergeProps(props2, tableRowProps), {\n          row: slots.row,\n          cell: props3 => {\n            let _slot;\n            return slots.cell ? createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), _isSlot(_slot = slots.cell(props3)) ? _slot : {\n              default: () => [_slot]\n            }) : createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), null);\n          }\n        }),\n        header: props2 => createVNode(HeaderRenderer, mergeProps(props2, tableHeaderProps), {\n          header: slots.header,\n          cell: props3 => {\n            let _slot2;\n            return slots[\"header-cell\"] ? createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), _isSlot(_slot2 = slots[\"header-cell\"](props3)) ? _slot2 : {\n              default: () => [_slot2]\n            }) : createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), null);\n          }\n        })\n      };\n      const rootKls = [props.class, ns.b(), ns.e(\"root\"), {\n        [ns.is(\"dynamic\")]: unref(isDynamic)\n      }];\n      const footerProps = {\n        class: ns.e(\"footer\"),\n        style: unref(footerHeight)\n      };\n      return createVNode(\"div\", {\n        \"class\": rootKls,\n        \"style\": unref(rootStyle)\n      }, [createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable, leftTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable$1, rightTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), slots.footer && createVNode(Footer, footerProps, {\n        default: slots.footer\n      }), unref(showEmpty) && createVNode(Footer$1, {\n        \"class\": ns.e(\"empty\"),\n        \"style\": unref(emptyStyle)\n      }, {\n        default: slots.empty\n      }), slots.overlay && createVNode(Overlay, {\n        \"class\": ns.e(\"overlay\")\n      }, {\n        default: slots.overlay\n      })]);\n    };\n  }\n});\nexport { TableV2 as default };","map":{"version":3,"mappings":"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","names":["Empty","Overlay","COMPONENT_NAME","TableV2","name","props","columnsStyles","expose","fixedColumnsOnRight","mainColumns","mainTableHeight","fixedColumnsOnLeft","fixedTableHeight","leftTableWidth","rightTableWidth","data","depthMap","expandedRowKeys","hasFixedColumns","mainTableRef","leftTableRef","rightTableRef","isDynamic","isResetting","isScrolling","bodyWidth","emptyStyle","rootStyle","headerWidth","footerHeight","showEmpty","onColumnSorted","scrollTo","scrollToLeft","scrollToTop","scrollToRow","getRowHeight","useTable","onRowExpanded","onRowsRendered","onScroll","onVerticalScroll","ns","cache","cellProps","estimatedRowHeight","expandColumnKey","fixedData","headerClass","headerProps","headerCellProps","sortBy","sortState","rowClass","rowEventHandlers","rowKey","rowProps","scrollbarAlwaysOn","iconSize","useIsScrolling","vScrollbarSize","width","mainTableProps","headerHeight","rowHeight","indentSize","_fixedTableHeight","columns","class","unref","height","scrollbarStartGap","scrollbarEndGap","rightColumnsWidth","rightColumnsWidthWithScrollbar","rightTableProps","_data","tableRowProps","tableHeaderProps","_columnsStyles","tableSlots","row","cell","onRowHeightChange","header","default","rootKls","footerProps","slots","leftTableProps","_isSlot"],"sources":["../../../../../../packages/components/table-v2/src/table-v2.tsx"],"sourcesContent":["// @ts-nocheck\nimport { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth) + vScrollbarSize,\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell(props)}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell'](props)}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}