{"ast":null,"code":"import { defineComponent, inject, computed, openBlock, createElementBlock, unref, normalizeClass, normalizeStyle, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { dialogInjectionKey } from './constants.mjs';\nimport { dialogContentProps, dialogContentEmits } from './dialog-content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { CloseComponents } from '../../../utils/vue/icon.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nconst _hoisted_1 = [\"aria-level\"];\nconst _hoisted_2 = [\"aria-label\"];\nconst _hoisted_3 = [\"id\"];\nconst __default__ = defineComponent({\n  name: \"ElDialogContent\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n  setup(__props) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const {\n      Close\n    } = CloseComponents;\n    const {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      style\n    } = inject(dialogInjectionKey);\n    const {\n      focusTrapRef\n    } = inject(FOCUS_TRAP_INJECTION_KEY);\n    const dialogKls = computed(() => [ns.b(), ns.is(\"fullscreen\", props.fullscreen), ns.is(\"draggable\", props.draggable), ns.is(\"align-center\", props.alignCenter), {\n      [ns.m(\"center\")]: props.center\n    }]);\n    const composedDialogRef = composeRefs(focusTrapRef, dialogRef);\n    const draggable = computed(() => props.draggable);\n    const overflow = computed(() => props.overflow);\n    useDraggable(dialogRef, headerRef, draggable, overflow);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref: unref(composedDialogRef),\n        class: normalizeClass(unref(dialogKls)),\n        style: normalizeStyle(unref(style)),\n        tabindex: \"-1\"\n      }, [createElementVNode(\"header\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        class: normalizeClass([unref(ns).e(\"header\"), {\n          \"show-close\": _ctx.showClose\n        }])\n      }, [renderSlot(_ctx.$slots, \"header\", {}, () => [createElementVNode(\"span\", {\n        role: \"heading\",\n        \"aria-level\": _ctx.ariaLevel,\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, toDisplayString(_ctx.title), 11, _hoisted_1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": unref(t)(\"el.dialog.close\"),\n        class: normalizeClass(unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"close\"))\n      }, [createVNode(unref(ElIcon), {\n        class: normalizeClass(unref(ns).e(\"close\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))]),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_2)) : createCommentVNode(\"v-if\", true)], 2), createElementVNode(\"div\", {\n        id: unref(bodyId),\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_3), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"footer\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n});\nvar ElDialogContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"dialog-content.vue\"]]);\nexport { ElDialogContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;mCA4Cc;EAAEA,IAAM;AAAA,CAAkB;;;;;;;IAHlC;MAAEC;IAAA,IAAMC,SAAU;IACxB,MAAM;MAAEC;IAAU;IAMlB,MAAM;MAAEC,SAAW;MAAAC;MAAWC;MAAQC,EAAI;MAAAC;IAAA,IAAUC,OAAOC,kBAAkB;IACvE;MAAEC;IAAiB,WAAOC,wBAAwB;IAElD,kBAAYC,SAAS,MAAM,CAC/BN,GAAGO,CAAE,IACLP,EAAG,IAAG,YAAc,QAAMQ,UAAU,GACpCR,EAAG,IAAG,WAAa,QAAMS,SAAS,GAClCT,EAAG,IAAG,cAAgB,QAAMU,WAAW,GACvC;MAAE,CAACV,GAAGW,EAAE,QAAQ,IAAIC,MAAMC;IAAO,EAClC;IAEK,0BAAoBC,WAAY,eAAcjB,SAAS;IAE7D,MAAMY,SAAY,YAAS,MAAMG,MAAMH,SAAS;IAChD,MAAMM,QAAW,YAAS,MAAMH,MAAMG,QAAQ;IACjCC,wBAAWlB,SAAW,aAAWiB,QAAQ","names":["name","t","useLocale","Close","dialogRef","headerRef","bodyId","ns","style","inject","dialogInjectionKey","focusTrapRef","FOCUS_TRAP_INJECTION_KEY","computed","b","fullscreen","draggable","alignCenter","m","props","center","composeRefs","overflow","useDraggable"],"sources":["../../../../../../packages/components/dialog/src/dialog-content.vue"],"sourcesContent":["<template>\n  <div :ref=\"composedDialogRef\" :class=\"dialogKls\" :style=\"style\" tabindex=\"-1\">\n    <header\n      ref=\"headerRef\"\n      :class=\"[ns.e('header'), { 'show-close': showClose }]\"\n    >\n      <slot name=\"header\">\n        <span role=\"heading\" :aria-level=\"ariaLevel\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from './constants'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst dialogKls = computed(() => [\n  ns.b(),\n  ns.is('fullscreen', props.fullscreen),\n  ns.is('draggable', props.draggable),\n  ns.is('align-center', props.alignCenter),\n  { [ns.m('center')]: props.center },\n])\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nconst overflow = computed(() => props.overflow)\nuseDraggable(dialogRef, headerRef, draggable, overflow)\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}